"use strict";
const Draggable = require("draggable");
const emissary = require("emissary");
const Button = require("./Button");
class DebugView {
    constructor() {
        this.emitter = new emissary.Emitter();
        this.element = document.createElement('atom-panel');
        this.element.className = 'debug-toolbar padded';
        this.container = document.createElement('div');
        this.container.classList.add('btn-group');
        this.container.classList.add('btn-group-lg');
        this.element.appendChild(this.container);
        this.buttons = {
            step: this.addButton('Step forward', 'arrow-down', 'step'),
            back: this.addButton('Back in history', 'chevron-up', 'back'),
            forward: this.addButton('Forward in history', 'chevron-down', 'forward'),
            continue: this.addButton('Continue', 'playback-play', 'continue'),
            stop: this.addButton('Stop', 'primitive-square', 'stop')
        };
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick()
        });
        this.draggable.set(atom.getSize().width / 2 - 87, 30);
    }
    addButton(description, icon, eventName) {
        const button = new Button(description, icon);
        button.emitter.on('click', () => this.emitter.emit(eventName));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        for (const button of Object.values(this.buttons)) {
            button.startClick = false;
        }
    }
    disableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = false;
            }
        }
    }
    enableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = true;
            }
        }
    }
    destroy() {
        for (const button of Object.values(this.buttons)) {
            button.destroy();
        }
    }
}
module.exports = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi92aWV3cy9EZWJ1Z1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVDQUF1QztBQUN2QyxxQ0FBcUM7QUFDckMsbUNBQW1DO0FBTW5DO0lBdURJO1FBOUNPLFlBQU8sR0FBcUIsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7UUErQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQTtRQUUvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUU1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFeEMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQzFELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLENBQUM7WUFDN0QsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztZQUN4RSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQztZQUNqRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO1NBQ3pELENBQUE7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDekMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFO1NBQy9DLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBeUIsRUFBRSxDQUFDLENBQUE7SUFDaEYsQ0FBQztJQTNETyxTQUFTLENBQUUsV0FBbUIsRUFBRSxJQUFZLEVBQUUsU0FBaUI7UUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFDOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDakIsQ0FBQztJQUVPLGtCQUFrQjtRQUN0QixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUE7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsR0FBRyxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO1lBQzVCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDM0IsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNILEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUM5QyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDcEIsQ0FBQztJQUNMLENBQUM7Q0EwQko7QUFFRCxpQkFBUyxTQUFTLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRHJhZ2dhYmxlID0gcmVxdWlyZSgnZHJhZ2dhYmxlJylcbmltcG9ydCBlbWlzc2FyeSA9IHJlcXVpcmUoJ2VtaXNzYXJ5JylcbmltcG9ydCBCdXR0b24gPSByZXF1aXJlKCcuL0J1dHRvbicpXG5cbmludGVyZmFjZSBEZWJ1Z1ZpZXdFbWl0dGVyIGV4dGVuZHMgRW1pc3NhcnkuSUVtaXR0ZXIge1xuICAgIG9uIChldmVudE5hbWU6ICdmb3J3YXJkJyB8ICdiYWNrJyB8ICdjb250aW51ZScgfCAnc3RvcCcgfCAnc3RlcCcsIGhhbmRsZXI6ICgpID0+IGFueSlcbn1cblxuY2xhc3MgRGVidWdWaWV3ICB7XG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnRcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnRcbiAgICBwcml2YXRlIGRyYWdnYWJsZTogRHJhZ2dhYmxlXG5cbiAgICAvKiogRXZlbnQgSGFuZGxlclxuICAgICAgKlxuICAgICAgKiBFdmVudHMgY29ycmVzcG9uZCB0byB0aGUgYnV0dG9uIHByZXNzZWQuIFRoZXNlIGFyZTogZm9yd2FyZCwgYmFjaywgY29udGludWUgb3Igc3RvcC5cbiAgICAgICovXG4gICAgcHVibGljIGVtaXR0ZXI6IERlYnVnVmlld0VtaXR0ZXIgPSBuZXcgZW1pc3NhcnkuRW1pdHRlcigpXG5cbiAgICBidXR0b25zOiB7XG4gICAgICAgIHN0ZXA6IEJ1dHRvblxuICAgICAgICBiYWNrOiBCdXR0b25cbiAgICAgICAgZm9yd2FyZDogQnV0dG9uXG4gICAgICAgIGNvbnRpbnVlOiBCdXR0b25cbiAgICAgICAgc3RvcDogQnV0dG9uXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRCdXR0b24gKGRlc2NyaXB0aW9uOiBzdHJpbmcsIGljb246IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IEJ1dHRvbihkZXNjcmlwdGlvbiwgaWNvbilcbiAgICAgICAgYnV0dG9uLmVtaXR0ZXIub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5lbWl0dGVyLmVtaXQoZXZlbnROYW1lKSlcbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uLmVsZW1lbnQpXG5cbiAgICAgICAgcmV0dXJuIGJ1dHRvblxuICAgIH1cblxuICAgIHByaXZhdGUgY2FuY2VsQnV0dG9uc0NsaWNrICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICAgICAgYnV0dG9uLnN0YXJ0Q2xpY2sgPSBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGlzYWJsZUFsbERlYnVnQnV0dG9ucyAoKSB7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIE9iamVjdC52YWx1ZXModGhpcy5idXR0b25zKSkge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbiAhPT0gdGhpcy5idXR0b25zLnN0b3ApIHtcbiAgICAgICAgICAgICAgICBidXR0b24uaXNFbmFibGVkID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVuYWJsZUFsbERlYnVnQnV0dG9ucyAoKSB7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIE9iamVjdC52YWx1ZXModGhpcy5idXR0b25zKSkge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbiAhPT0gdGhpcy5idXR0b25zLnN0b3ApIHtcbiAgICAgICAgICAgICAgICBidXR0b24uaXNFbmFibGVkID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSAoKSB7XG4gICAgICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIE9iamVjdC52YWx1ZXModGhpcy5idXR0b25zKSl7XG4gICAgICAgICAgICBidXR0b24uZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F0b20tcGFuZWwnKVxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2RlYnVnLXRvb2xiYXIgcGFkZGVkJ1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYnRuLWdyb3VwJylcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYnRuLWdyb3VwLWxnJylcblxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpXG5cbiAgICAgICAgdGhpcy5idXR0b25zID0ge1xuICAgICAgICAgIHN0ZXA6IHRoaXMuYWRkQnV0dG9uKCdTdGVwIGZvcndhcmQnLCAnYXJyb3ctZG93bicsICdzdGVwJyksXG4gICAgICAgICAgYmFjazogdGhpcy5hZGRCdXR0b24oJ0JhY2sgaW4gaGlzdG9yeScsICdjaGV2cm9uLXVwJywgJ2JhY2snKSxcbiAgICAgICAgICBmb3J3YXJkOiB0aGlzLmFkZEJ1dHRvbignRm9yd2FyZCBpbiBoaXN0b3J5JywgJ2NoZXZyb24tZG93bicsICdmb3J3YXJkJyksXG4gICAgICAgICAgY29udGludWU6IHRoaXMuYWRkQnV0dG9uKCdDb250aW51ZScsICdwbGF5YmFjay1wbGF5JywgJ2NvbnRpbnVlJyksXG4gICAgICAgICAgc3RvcDogdGhpcy5hZGRCdXR0b24oJ1N0b3AnLCAncHJpbWl0aXZlLXNxdWFyZScsICdzdG9wJylcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gbmV3IERyYWdnYWJsZSh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiAoKSA9PiB0aGlzLmNhbmNlbEJ1dHRvbnNDbGljaygpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5kcmFnZ2FibGUuc2V0KGF0b20uZ2V0U2l6ZSgpLndpZHRoIC8gMiAtIDg3LypzaXplIG9mIHRoZSBlbGVtZW50Ki8sIDMwKVxuICAgIH1cbn1cblxuZXhwb3J0ID0gRGVidWdWaWV3XG4iXX0=