"use strict";
const Draggable = require("draggable");
const emissary = require("emissary");
const Button = require("./Button");
const _ = require("lodash");
class DebugView {
    constructor() {
        this.emitter = new emissary.Emitter();
        this.buttons = {
            step: null,
            back: null,
            forward: null,
            continue: null,
            stop: null
        };
        this.element = document.createElement("atom-panel");
        this.element.className = "debug-toolbar padded";
        this.container = document.createElement("div");
        this.container.classList.add("btn-group");
        this.container.classList.add("btn-group-lg");
        this.element.appendChild(this.container);
        this.buttons.step = this.addButton("Step forward", "arrow-down", "step");
        this.buttons.back = this.addButton("Back in history", "chevron-up", "back");
        this.buttons.forward = this.addButton("Forward in history", "chevron-down", "forward");
        this.buttons.continue = this.addButton("Continue", "playback-play", "continue");
        this.buttons.stop = this.addButton("Stop", "primitive-square", "stop");
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick()
        });
        this.draggable.set(atom.workspace.getActiveTextEditor()["width"] / 2 - 87, 30);
    }
    addButton(description, icon, eventName) {
        var button = new Button(description, icon);
        button.emitter.on("click", () => this.emitter.emit(eventName, null));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        _.values(this.buttons).forEach((button) => button.startClick = false);
    }
    disableAllDebugButtons() {
        _.values(this.buttons).forEach(button => {
            if (button != this.buttons.stop)
                button.isEnabled = false;
        });
    }
    enableAllDebugButtons() {
        _.values(this.buttons).forEach(button => {
            if (button != this.buttons.stop)
                button.isEnabled = true;
        });
    }
    destroy() {
        for (var buttonName of Object.keys(this.buttons)) {
            var button = this.buttons[buttonName];
            button.destroy();
        }
    }
}
module.exports = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi92aWV3cy9EZWJ1Z1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVDQUF3QztBQUN4QyxxQ0FBcUM7QUFDckMsbUNBQW9DO0FBQ3BDLDRCQUE2QjtBQU03QjtJQW9ESTtRQTNDTyxZQUFPLEdBQXFCLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRTFELFlBQU8sR0FBRztZQUNOLElBQUksRUFBVSxJQUFJO1lBQ2xCLElBQUksRUFBVSxJQUFJO1lBQ2xCLE9BQU8sRUFBVSxJQUFJO1lBQ3JCLFFBQVEsRUFBVSxJQUFJO1lBQ3RCLElBQUksRUFBVSxJQUFJO1NBQ3JCLENBQUE7UUFvQ0csSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFDO1FBRWhELElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV6QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXZFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN6QyxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7U0FDL0MsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQXlCLEVBQUUsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUF0RE8sU0FBUyxDQUFDLFdBQW1CLEVBQUUsSUFBWSxFQUFFLFNBQWlCO1FBQ2xFLElBQUksTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU07WUFDakMsRUFBRSxDQUFBLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUMzQixNQUFNLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQTtRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU07WUFDakMsRUFBRSxDQUFBLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO2dCQUMzQixNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPO1FBQ0gsR0FBRyxDQUFBLENBQUMsSUFBSSxVQUFVLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzdDLElBQUksTUFBTSxHQUFXLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3JCLENBQUM7SUFDTCxDQUFDO0NBd0JKO0FBRUQsaUJBQVMsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERyYWdnYWJsZSA9IHJlcXVpcmUoXCJkcmFnZ2FibGVcIik7XG5pbXBvcnQgZW1pc3NhcnkgPSByZXF1aXJlKFwiZW1pc3NhcnlcIilcbmltcG9ydCBCdXR0b24gPSByZXF1aXJlKFwiLi9CdXR0b25cIik7XG5pbXBvcnQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmludGVyZmFjZSBEZWJ1Z1ZpZXdFbWl0dGVyIGV4dGVuZHMgRW1pc3NhcnkuSUVtaXR0ZXJ7XG4gICAgb24oZXZlbnROYW1lOiBcImZvcndhcmRcIiB8IFwiYmFja1wiIHwgXCJjb250aW51ZVwiIHwgXCJzdG9wXCIgfCBcInN0ZXBcIiwgaGFuZGxlcjogKCkgPT4gYW55KTtcbn1cblxuY2xhc3MgRGVidWdWaWV3ICB7XG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgZHJhZ2dhYmxlOiBEcmFnZ2FibGU7XG5cbiAgICAvKiogRXZlbnQgSGFuZGxlclxuICAgICAgKlxuICAgICAgKiBFdmVudHMgY29ycmVzcG9uZCB0byB0aGUgYnV0dG9uIHByZXNzZWQuIFRoZXNlIGFyZTogZm9yd2FyZCwgYmFjaywgY29udGludWUgb3Igc3RvcC5cbiAgICAgICovXG4gICAgcHVibGljIGVtaXR0ZXI6IERlYnVnVmlld0VtaXR0ZXIgPSBuZXcgZW1pc3NhcnkuRW1pdHRlcigpO1xuXG4gICAgYnV0dG9ucyA9IHtcbiAgICAgICAgc3RlcDogPEJ1dHRvbj5udWxsLFxuICAgICAgICBiYWNrOiA8QnV0dG9uPm51bGwsXG4gICAgICAgIGZvcndhcmQ6IDxCdXR0b24+bnVsbCxcbiAgICAgICAgY29udGludWU6IDxCdXR0b24+bnVsbCxcbiAgICAgICAgc3RvcDogPEJ1dHRvbj5udWxsXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRCdXR0b24oZGVzY3JpcHRpb246IHN0cmluZywgaWNvbjogc3RyaW5nLCBldmVudE5hbWU6IHN0cmluZyl7XG4gICAgICAgIHZhciBidXR0b24gPSBuZXcgQnV0dG9uKGRlc2NyaXB0aW9uLCBpY29uKTtcbiAgICAgICAgYnV0dG9uLmVtaXR0ZXIub24oXCJjbGlja1wiLCAoKSA9PiB0aGlzLmVtaXR0ZXIuZW1pdChldmVudE5hbWUsIG51bGwpKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uLmVsZW1lbnQpXG5cbiAgICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbmNlbEJ1dHRvbnNDbGljaygpe1xuICAgICAgICBfLnZhbHVlcyh0aGlzLmJ1dHRvbnMpLmZvckVhY2goKGJ1dHRvbikgPT4gYnV0dG9uLnN0YXJ0Q2xpY2sgPSBmYWxzZSk7XG4gICAgfVxuXG4gICAgZGlzYWJsZUFsbERlYnVnQnV0dG9ucygpe1xuICAgICAgICBfLnZhbHVlcyh0aGlzLmJ1dHRvbnMpLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgICAgICAgIGlmKGJ1dHRvbiAhPSB0aGlzLmJ1dHRvbnMuc3RvcClcbiAgICAgICAgICAgICAgICBidXR0b24uaXNFbmFibGVkID0gZmFsc2VcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZW5hYmxlQWxsRGVidWdCdXR0b25zKCl7XG4gICAgICAgIF8udmFsdWVzKHRoaXMuYnV0dG9ucykuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICAgICAgaWYoYnV0dG9uICE9IHRoaXMuYnV0dG9ucy5zdG9wKVxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKXtcbiAgICAgICAgZm9yKHZhciBidXR0b25OYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMuYnV0dG9ucykpe1xuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IDxCdXR0b24+dGhpcy5idXR0b25zW2J1dHRvbk5hbWVdO1xuICAgICAgICAgICAgYnV0dG9uLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhdG9tLXBhbmVsXCIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gXCJkZWJ1Zy10b29sYmFyIHBhZGRlZFwiO1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImJ0bi1ncm91cFwiKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImJ0bi1ncm91cC1sZ1wiKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpO1xuXG4gICAgICAgIHRoaXMuYnV0dG9ucy5zdGVwID0gdGhpcy5hZGRCdXR0b24oXCJTdGVwIGZvcndhcmRcIiwgXCJhcnJvdy1kb3duXCIsIFwic3RlcFwiKTtcbiAgICAgICAgdGhpcy5idXR0b25zLmJhY2sgPSB0aGlzLmFkZEJ1dHRvbihcIkJhY2sgaW4gaGlzdG9yeVwiLCBcImNoZXZyb24tdXBcIiwgXCJiYWNrXCIpO1xuICAgICAgICB0aGlzLmJ1dHRvbnMuZm9yd2FyZCA9IHRoaXMuYWRkQnV0dG9uKFwiRm9yd2FyZCBpbiBoaXN0b3J5XCIsIFwiY2hldnJvbi1kb3duXCIsIFwiZm9yd2FyZFwiKTtcbiAgICAgICAgdGhpcy5idXR0b25zLmNvbnRpbnVlID0gdGhpcy5hZGRCdXR0b24oXCJDb250aW51ZVwiLCBcInBsYXliYWNrLXBsYXlcIiwgXCJjb250aW51ZVwiKTtcbiAgICAgICAgdGhpcy5idXR0b25zLnN0b3AgPSB0aGlzLmFkZEJ1dHRvbihcIlN0b3BcIiwgXCJwcmltaXRpdmUtc3F1YXJlXCIsIFwic3RvcFwiKTtcblxuICAgICAgICB0aGlzLmRyYWdnYWJsZSA9IG5ldyBEcmFnZ2FibGUodGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBvbkRyYWdTdGFydDogKCkgPT4gdGhpcy5jYW5jZWxCdXR0b25zQ2xpY2soKVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRyYWdnYWJsZS5zZXQoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpW1wid2lkdGhcIl0gLyAyIC0gODcvKnNpemUgb2YgdGhlIGVsZW1lbnQqLywgMzApO1xuICAgIH1cbn1cblxuZXhwb3J0ID0gRGVidWdWaWV3O1xuIl19