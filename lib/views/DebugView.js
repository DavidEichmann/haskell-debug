"use strict";
const Draggable = require("draggable");
const emissary = require("emissary");
const Button = require("./Button");
const _ = require("lodash");
class DebugView {
    constructor() {
        this.emitter = new emissary.Emitter();
        this.buttons = {
            step: null,
            back: null,
            forward: null,
            continue: null,
            stop: null
        };
        this.element = document.createElement("atom-panel");
        this.element.className = "debug-toolbar padded";
        this.container = document.createElement("div");
        this.container.classList.add("btn-group");
        this.container.classList.add("btn-group-lg");
        this.element.appendChild(this.container);
        this.buttons.step = this.addButton("Step forward", "arrow-down", "step");
        this.buttons.back = this.addButton("Back in history", "chevron-up", "back");
        this.buttons.forward = this.addButton("Forward in history", "chevron-down", "forward");
        this.buttons.continue = this.addButton("Continue", "playback-play", "continue");
        this.buttons.stop = this.addButton("Stop", "primitive-square", "stop");
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick()
        });
        this.draggable.set(atom.workspace.getActiveTextEditor()["width"] / 2 - 87, 30);
    }
    addButton(description, icon, eventName) {
        var button = new Button(description, icon);
        button.emitter.on("click", () => this.emitter.emit(eventName, null));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        _.values(this.buttons).forEach((button) => button.startClick = false);
    }
    disableAllDebugButtons() {
        _.values(this.buttons).forEach(button => {
            if (button != this.buttons.stop)
                button.isEnabled = false;
        });
    }
    enableAllDebugButtons() {
        _.values(this.buttons).forEach(button => {
            if (button != this.buttons.stop)
                button.isEnabled = true;
        });
    }
    destroy() {
        for (var buttonName of Object.keys(this.buttons)) {
            var button = this.buttons[buttonName];
            button.destroy();
        }
    }
}
module.exports = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ZpZXdzL0RlYnVnVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsdUNBQXdDO0FBQ3hDLHFDQUFxQztBQUNyQyxtQ0FBb0M7QUFDcEMsNEJBQTZCO0FBTTdCO0lBb0RJO1FBM0NPLFlBQU8sR0FBcUIsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFMUQsWUFBTyxHQUFHO1lBQ04sSUFBSSxFQUFVLElBQUk7WUFDbEIsSUFBSSxFQUFVLElBQUk7WUFDbEIsT0FBTyxFQUFVLElBQUk7WUFDckIsUUFBUSxFQUFVLElBQUk7WUFDdEIsSUFBSSxFQUFVLElBQUk7U0FDckIsQ0FBQTtRQW9DRyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUM7UUFFaEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXpDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN2RixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3pDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtTQUMvQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBeUIsRUFBRSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQXRETyxTQUFTLENBQUMsV0FBbUIsRUFBRSxJQUFZLEVBQUUsU0FBaUI7UUFDbEUsSUFBSSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUUxQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxrQkFBa0I7UUFDdEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELHNCQUFzQjtRQUNsQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUNqQyxFQUFFLENBQUEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTTtZQUNqQyxFQUFFLENBQUEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE9BQU87UUFDSCxHQUFHLENBQUEsQ0FBQyxJQUFJLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDN0MsSUFBSSxNQUFNLEdBQVcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7Q0F3Qko7QUFFRCxpQkFBUyxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRHJhZ2dhYmxlID0gcmVxdWlyZShcImRyYWdnYWJsZVwiKTtcbmltcG9ydCBlbWlzc2FyeSA9IHJlcXVpcmUoXCJlbWlzc2FyeVwiKVxuaW1wb3J0IEJ1dHRvbiA9IHJlcXVpcmUoXCIuL0J1dHRvblwiKTtcbmltcG9ydCBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcblxuaW50ZXJmYWNlIERlYnVnVmlld0VtaXR0ZXIgZXh0ZW5kcyBFbWlzc2FyeS5JRW1pdHRlcntcbiAgICBvbihldmVudE5hbWU6IFwiZm9yd2FyZFwiIHwgXCJiYWNrXCIgfCBcImNvbnRpbnVlXCIgfCBcInN0b3BcIiB8IFwic3RlcFwiLCBoYW5kbGVyOiAoKSA9PiBhbnkpO1xufVxuXG5jbGFzcyBEZWJ1Z1ZpZXcgIHtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBkcmFnZ2FibGU6IERyYWdnYWJsZTtcblxuICAgIC8qKiBFdmVudCBIYW5kbGVyXG4gICAgICAqXG4gICAgICAqIEV2ZW50cyBjb3JyZXNwb25kIHRvIHRoZSBidXR0b24gcHJlc3NlZC4gVGhlc2UgYXJlOiBmb3J3YXJkLCBiYWNrLCBjb250aW51ZSBvciBzdG9wLlxuICAgICAgKi9cbiAgICBwdWJsaWMgZW1pdHRlcjogRGVidWdWaWV3RW1pdHRlciA9IG5ldyBlbWlzc2FyeS5FbWl0dGVyKCk7XG5cbiAgICBidXR0b25zID0ge1xuICAgICAgICBzdGVwOiA8QnV0dG9uPm51bGwsXG4gICAgICAgIGJhY2s6IDxCdXR0b24+bnVsbCxcbiAgICAgICAgZm9yd2FyZDogPEJ1dHRvbj5udWxsLFxuICAgICAgICBjb250aW51ZTogPEJ1dHRvbj5udWxsLFxuICAgICAgICBzdG9wOiA8QnV0dG9uPm51bGxcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEJ1dHRvbihkZXNjcmlwdGlvbjogc3RyaW5nLCBpY29uOiBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nKXtcbiAgICAgICAgdmFyIGJ1dHRvbiA9IG5ldyBCdXR0b24oZGVzY3JpcHRpb24sIGljb24pO1xuICAgICAgICBidXR0b24uZW1pdHRlci5vbihcImNsaWNrXCIsICgpID0+IHRoaXMuZW1pdHRlci5lbWl0KGV2ZW50TmFtZSwgbnVsbCkpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24uZWxlbWVudClcblxuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FuY2VsQnV0dG9uc0NsaWNrKCl7XG4gICAgICAgIF8udmFsdWVzKHRoaXMuYnV0dG9ucykuZm9yRWFjaCgoYnV0dG9uKSA9PiBidXR0b24uc3RhcnRDbGljayA9IGZhbHNlKTtcbiAgICB9XG5cbiAgICBkaXNhYmxlQWxsRGVidWdCdXR0b25zKCl7XG4gICAgICAgIF8udmFsdWVzKHRoaXMuYnV0dG9ucykuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICAgICAgaWYoYnV0dG9uICE9IHRoaXMuYnV0dG9ucy5zdG9wKVxuICAgICAgICAgICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlbmFibGVBbGxEZWJ1Z0J1dHRvbnMoKXtcbiAgICAgICAgXy52YWx1ZXModGhpcy5idXR0b25zKS5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICBpZihidXR0b24gIT0gdGhpcy5idXR0b25zLnN0b3ApXG4gICAgICAgICAgICAgICAgYnV0dG9uLmlzRW5hYmxlZCA9IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpe1xuICAgICAgICBmb3IodmFyIGJ1dHRvbk5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5idXR0b25zKSl7XG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gPEJ1dHRvbj50aGlzLmJ1dHRvbnNbYnV0dG9uTmFtZV07XG4gICAgICAgICAgICBidXR0b24uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImF0b20tcGFuZWxcIik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSBcImRlYnVnLXRvb2xiYXIgcGFkZGVkXCI7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYnRuLWdyb3VwXCIpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYnRuLWdyb3VwLWxnXCIpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG5cbiAgICAgICAgdGhpcy5idXR0b25zLnN0ZXAgPSB0aGlzLmFkZEJ1dHRvbihcIlN0ZXAgZm9yd2FyZFwiLCBcImFycm93LWRvd25cIiwgXCJzdGVwXCIpO1xuICAgICAgICB0aGlzLmJ1dHRvbnMuYmFjayA9IHRoaXMuYWRkQnV0dG9uKFwiQmFjayBpbiBoaXN0b3J5XCIsIFwiY2hldnJvbi11cFwiLCBcImJhY2tcIik7XG4gICAgICAgIHRoaXMuYnV0dG9ucy5mb3J3YXJkID0gdGhpcy5hZGRCdXR0b24oXCJGb3J3YXJkIGluIGhpc3RvcnlcIiwgXCJjaGV2cm9uLWRvd25cIiwgXCJmb3J3YXJkXCIpO1xuICAgICAgICB0aGlzLmJ1dHRvbnMuY29udGludWUgPSB0aGlzLmFkZEJ1dHRvbihcIkNvbnRpbnVlXCIsIFwicGxheWJhY2stcGxheVwiLCBcImNvbnRpbnVlXCIpO1xuICAgICAgICB0aGlzLmJ1dHRvbnMuc3RvcCA9IHRoaXMuYWRkQnV0dG9uKFwiU3RvcFwiLCBcInByaW1pdGl2ZS1zcXVhcmVcIiwgXCJzdG9wXCIpO1xuXG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gbmV3IERyYWdnYWJsZSh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiAoKSA9PiB0aGlzLmNhbmNlbEJ1dHRvbnNDbGljaygpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlLnNldChhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClbXCJ3aWR0aFwiXSAvIDIgLSA4Ny8qc2l6ZSBvZiB0aGUgZWxlbWVudCovLCAzMCk7XG4gICAgfVxufVxuXG5leHBvcnQgPSBEZWJ1Z1ZpZXc7XG4iXX0=