"use strict";
const Draggable = require("draggable");
const Button = require("./Button");
const atomAPI = require("atom");
class DebugView {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.element = document.createElement('atom-panel');
        this.element.className = 'debug-toolbar padded';
        this.container = document.createElement('div');
        this.container.classList.add('btn-group');
        this.container.classList.add('btn-group-lg');
        this.element.appendChild(this.container);
        this.buttons = {
            step: this.addButton('Step forward', 'arrow-down', 'step'),
            back: this.addButton('Back in history', 'chevron-up', 'back'),
            forward: this.addButton('Forward in history', 'chevron-down', 'forward'),
            continue: this.addButton('Continue', 'playback-play', 'continue'),
            stop: this.addButton('Stop', 'primitive-square', 'stop')
        };
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick()
        });
        this.draggable.set(atom.getSize().width / 2 - 87, 30);
    }
    addButton(description, icon, eventName) {
        const button = new Button(description, icon);
        button.emitter.on('click', () => this.emitter.emit(eventName, undefined));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        for (const button of Object.values(this.buttons)) {
            button.startClick = false;
        }
    }
    disableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = false;
            }
        }
    }
    enableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = true;
            }
        }
    }
    destroy() {
        for (const button of Object.values(this.buttons)) {
            button.destroy();
        }
    }
}
module.exports = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi92aWV3cy9EZWJ1Z1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVDQUF1QztBQUN2QyxtQ0FBbUM7QUFDbkMsZ0NBQWdDO0FBSWhDO0lBcURJO1FBNUNPLFlBQU8sR0FFVCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQTJDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ25ELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFBO1FBRS9DLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBRTVDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUV4QyxJQUFJLENBQUMsT0FBTyxHQUFHO1lBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUM7WUFDMUQsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQztZQUM3RCxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDO1lBQ3hFLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDO1lBQ2pFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLENBQUM7U0FDekQsQ0FBQTtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN6QyxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7U0FDL0MsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUF5QixFQUFFLENBQUMsQ0FBQTtJQUNoRixDQUFDO0lBM0RPLFNBQVMsQ0FBRSxXQUFtQixFQUFFLElBQVksRUFBRSxTQUFzQjtRQUN4RSxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFDekUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDakIsQ0FBQztJQUVPLGtCQUFrQjtRQUN0QixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUE7UUFDM0IsQ0FBQztJQUNMLENBQUM7SUFFRCxzQkFBc0I7UUFDbEIsR0FBRyxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO1lBQzVCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUVELHFCQUFxQjtRQUNqQixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDM0IsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNILEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUM5QyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDcEIsQ0FBQztJQUNMLENBQUM7Q0EwQko7QUFFRCxpQkFBUyxTQUFTLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRHJhZ2dhYmxlID0gcmVxdWlyZSgnZHJhZ2dhYmxlJylcbmltcG9ydCBCdXR0b24gPSByZXF1aXJlKCcuL0J1dHRvbicpXG5pbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoJ2F0b20nKVxuXG50eXBlIEJ1dHRvblR5cGVzID0gJ3N0ZXAnIHwgJ2JhY2snIHwgJ2ZvcndhcmQnIHwgJ2NvbnRpbnVlJyB8ICdzdG9wJ1xuXG5jbGFzcyBEZWJ1Z1ZpZXcgIHtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudFxuICAgIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudFxuICAgIHByaXZhdGUgZHJhZ2dhYmxlOiBEcmFnZ2FibGVcblxuICAgIC8qKiBFdmVudCBIYW5kbGVyXG4gICAgICAqXG4gICAgICAqIEV2ZW50cyBjb3JyZXNwb25kIHRvIHRoZSBidXR0b24gcHJlc3NlZC4gVGhlc2UgYXJlOiBmb3J3YXJkLCBiYWNrLCBjb250aW51ZSBvciBzdG9wLlxuICAgICAgKi9cbiAgICBwdWJsaWMgZW1pdHRlcjogYXRvbUFQSS5URW1pdHRlcjx7XG4gICAgICBbSyBpbiBCdXR0b25UeXBlc106IHVuZGVmaW5lZFxuICAgIH0+ID0gbmV3IGF0b21BUEkuRW1pdHRlcigpXG5cbiAgICBidXR0b25zOiB7XG4gICAgICBbSyBpbiBCdXR0b25UeXBlc106IEJ1dHRvblxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQnV0dG9uIChkZXNjcmlwdGlvbjogc3RyaW5nLCBpY29uOiBzdHJpbmcsIGV2ZW50TmFtZTogQnV0dG9uVHlwZXMpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gbmV3IEJ1dHRvbihkZXNjcmlwdGlvbiwgaWNvbilcbiAgICAgICAgYnV0dG9uLmVtaXR0ZXIub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5lbWl0dGVyLmVtaXQoZXZlbnROYW1lLCB1bmRlZmluZWQpKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24uZWxlbWVudClcblxuICAgICAgICByZXR1cm4gYnV0dG9uXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW5jZWxCdXR0b25zQ2xpY2sgKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3QudmFsdWVzKHRoaXMuYnV0dG9ucykpIHtcbiAgICAgICAgICBidXR0b24uc3RhcnRDbGljayA9IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNhYmxlQWxsRGVidWdCdXR0b25zICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uICE9PSB0aGlzLmJ1dHRvbnMuc3RvcCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZW5hYmxlQWxsRGVidWdCdXR0b25zICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uICE9PSB0aGlzLmJ1dHRvbnMuc3RvcCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKXtcbiAgICAgICAgICAgIGJ1dHRvbi5kZXN0cm95KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXRvbS1wYW5lbCcpXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAnZGVidWctdG9vbGJhciBwYWRkZWQnXG5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdidG4tZ3JvdXAnKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdidG4tZ3JvdXAtbGcnKVxuXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcilcblxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSB7XG4gICAgICAgICAgc3RlcDogdGhpcy5hZGRCdXR0b24oJ1N0ZXAgZm9yd2FyZCcsICdhcnJvdy1kb3duJywgJ3N0ZXAnKSxcbiAgICAgICAgICBiYWNrOiB0aGlzLmFkZEJ1dHRvbignQmFjayBpbiBoaXN0b3J5JywgJ2NoZXZyb24tdXAnLCAnYmFjaycpLFxuICAgICAgICAgIGZvcndhcmQ6IHRoaXMuYWRkQnV0dG9uKCdGb3J3YXJkIGluIGhpc3RvcnknLCAnY2hldnJvbi1kb3duJywgJ2ZvcndhcmQnKSxcbiAgICAgICAgICBjb250aW51ZTogdGhpcy5hZGRCdXR0b24oJ0NvbnRpbnVlJywgJ3BsYXliYWNrLXBsYXknLCAnY29udGludWUnKSxcbiAgICAgICAgICBzdG9wOiB0aGlzLmFkZEJ1dHRvbignU3RvcCcsICdwcmltaXRpdmUtc3F1YXJlJywgJ3N0b3AnKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSBuZXcgRHJhZ2dhYmxlKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgb25EcmFnU3RhcnQ6ICgpID0+IHRoaXMuY2FuY2VsQnV0dG9uc0NsaWNrKClcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmRyYWdnYWJsZS5zZXQoYXRvbS5nZXRTaXplKCkud2lkdGggLyAyIC0gODcvKnNpemUgb2YgdGhlIGVsZW1lbnQqLywgMzApXG4gICAgfVxufVxuXG5leHBvcnQgPSBEZWJ1Z1ZpZXdcbiJdfQ==