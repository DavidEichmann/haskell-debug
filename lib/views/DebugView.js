"use strict";
const Draggable = require("draggable");
const emissary = require("emissary");
const Button = require("./Button");
class DebugView {
    constructor() {
        this.emitter = new emissary.Emitter();
        this.element = document.createElement('atom-panel');
        this.element.className = 'debug-toolbar padded';
        this.container = document.createElement('div');
        this.container.classList.add('btn-group');
        this.container.classList.add('btn-group-lg');
        this.element.appendChild(this.container);
        this.buttons = {
            step: this.addButton('Step forward', 'arrow-down', 'step'),
            back: this.addButton('Back in history', 'chevron-up', 'back'),
            forward: this.addButton('Forward in history', 'chevron-down', 'forward'),
            continue: this.addButton('Continue', 'playback-play', 'continue'),
            stop: this.addButton('Stop', 'primitive-square', 'stop')
        };
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick()
        });
        this.draggable.set(atom.workspace.getActiveTextEditor().getWidth() / 2 - 87, 30);
    }
    addButton(description, icon, eventName) {
        const button = new Button(description, icon);
        button.emitter.on('click', () => this.emitter.emit(eventName));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        for (const button of Object.values(this.buttons)) {
            button.startClick = false;
        }
    }
    disableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = false;
            }
        }
    }
    enableAllDebugButtons() {
        for (const button of Object.values(this.buttons)) {
            if (button !== this.buttons.stop) {
                button.isEnabled = true;
            }
        }
    }
    destroy() {
        for (const button of Object.values(this.buttons)) {
            button.destroy();
        }
    }
}
module.exports = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi92aWV3cy9EZWJ1Z1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVDQUF1QztBQUN2QyxxQ0FBcUM7QUFDckMsbUNBQW1DO0FBTW5DO0lBdURJO1FBOUNPLFlBQU8sR0FBcUIsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUE7UUErQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQTtRQUUvQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDOUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUU1QyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFFeEMsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQzFELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLFlBQVksRUFBRSxNQUFNLENBQUM7WUFDN0QsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQztZQUN4RSxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsQ0FBQztZQUNqRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDO1NBQ3pELENBQUE7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDekMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFO1NBQy9DLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUF5QixFQUFFLENBQUMsQ0FBQTtJQUMzRyxDQUFDO0lBM0RPLFNBQVMsQ0FBRSxXQUFtQixFQUFFLElBQVksRUFBRSxTQUFpQjtRQUNuRSxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtRQUM5RCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0lBRU8sa0JBQWtCO1FBQ3RCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQTtRQUMzQixDQUFDO0lBQ0wsQ0FBQztJQUVELHNCQUFzQjtRQUNsQixHQUFHLENBQUMsQ0FBQyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUE7WUFDNUIsQ0FBQztRQUNMLENBQUM7SUFDTCxDQUFDO0lBRUQscUJBQXFCO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtZQUMzQixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0gsR0FBRyxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQzlDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUNwQixDQUFDO0lBQ0wsQ0FBQztDQTBCSjtBQUVELGlCQUFTLFNBQVMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEcmFnZ2FibGUgPSByZXF1aXJlKCdkcmFnZ2FibGUnKVxuaW1wb3J0IGVtaXNzYXJ5ID0gcmVxdWlyZSgnZW1pc3NhcnknKVxuaW1wb3J0IEJ1dHRvbiA9IHJlcXVpcmUoJy4vQnV0dG9uJylcblxuaW50ZXJmYWNlIERlYnVnVmlld0VtaXR0ZXIgZXh0ZW5kcyBFbWlzc2FyeS5JRW1pdHRlciB7XG4gICAgb24gKGV2ZW50TmFtZTogJ2ZvcndhcmQnIHwgJ2JhY2snIHwgJ2NvbnRpbnVlJyB8ICdzdG9wJyB8ICdzdGVwJywgaGFuZGxlcjogKCkgPT4gYW55KVxufVxuXG5jbGFzcyBEZWJ1Z1ZpZXcgIHtcbiAgICBlbGVtZW50OiBIVE1MRWxlbWVudFxuICAgIHByaXZhdGUgY29udGFpbmVyOiBIVE1MRWxlbWVudFxuICAgIHByaXZhdGUgZHJhZ2dhYmxlOiBEcmFnZ2FibGVcblxuICAgIC8qKiBFdmVudCBIYW5kbGVyXG4gICAgICAqXG4gICAgICAqIEV2ZW50cyBjb3JyZXNwb25kIHRvIHRoZSBidXR0b24gcHJlc3NlZC4gVGhlc2UgYXJlOiBmb3J3YXJkLCBiYWNrLCBjb250aW51ZSBvciBzdG9wLlxuICAgICAgKi9cbiAgICBwdWJsaWMgZW1pdHRlcjogRGVidWdWaWV3RW1pdHRlciA9IG5ldyBlbWlzc2FyeS5FbWl0dGVyKClcblxuICAgIGJ1dHRvbnM6IHtcbiAgICAgICAgc3RlcDogQnV0dG9uXG4gICAgICAgIGJhY2s6IEJ1dHRvblxuICAgICAgICBmb3J3YXJkOiBCdXR0b25cbiAgICAgICAgY29udGludWU6IEJ1dHRvblxuICAgICAgICBzdG9wOiBCdXR0b25cbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEJ1dHRvbiAoZGVzY3JpcHRpb246IHN0cmluZywgaWNvbjogc3RyaW5nLCBldmVudE5hbWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uKGRlc2NyaXB0aW9uLCBpY29uKVxuICAgICAgICBidXR0b24uZW1pdHRlci5vbignY2xpY2snLCAoKSA9PiB0aGlzLmVtaXR0ZXIuZW1pdChldmVudE5hbWUpKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24uZWxlbWVudClcblxuICAgICAgICByZXR1cm4gYnV0dG9uXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW5jZWxCdXR0b25zQ2xpY2sgKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBPYmplY3QudmFsdWVzKHRoaXMuYnV0dG9ucykpIHtcbiAgICAgICAgICBidXR0b24uc3RhcnRDbGljayA9IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNhYmxlQWxsRGVidWdCdXR0b25zICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uICE9PSB0aGlzLmJ1dHRvbnMuc3RvcCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZW5hYmxlQWxsRGVidWdCdXR0b25zICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKSB7XG4gICAgICAgICAgICBpZiAoYnV0dG9uICE9PSB0aGlzLmJ1dHRvbnMuc3RvcCkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5pc0VuYWJsZWQgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgZm9yIChjb25zdCBidXR0b24gb2YgT2JqZWN0LnZhbHVlcyh0aGlzLmJ1dHRvbnMpKXtcbiAgICAgICAgICAgIGJ1dHRvbi5kZXN0cm95KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXRvbS1wYW5lbCcpXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc05hbWUgPSAnZGVidWctdG9vbGJhciBwYWRkZWQnXG5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdidG4tZ3JvdXAnKVxuICAgICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdidG4tZ3JvdXAtbGcnKVxuXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcilcblxuICAgICAgICB0aGlzLmJ1dHRvbnMgPSB7XG4gICAgICAgICAgc3RlcDogdGhpcy5hZGRCdXR0b24oJ1N0ZXAgZm9yd2FyZCcsICdhcnJvdy1kb3duJywgJ3N0ZXAnKSxcbiAgICAgICAgICBiYWNrOiB0aGlzLmFkZEJ1dHRvbignQmFjayBpbiBoaXN0b3J5JywgJ2NoZXZyb24tdXAnLCAnYmFjaycpLFxuICAgICAgICAgIGZvcndhcmQ6IHRoaXMuYWRkQnV0dG9uKCdGb3J3YXJkIGluIGhpc3RvcnknLCAnY2hldnJvbi1kb3duJywgJ2ZvcndhcmQnKSxcbiAgICAgICAgICBjb250aW51ZTogdGhpcy5hZGRCdXR0b24oJ0NvbnRpbnVlJywgJ3BsYXliYWNrLXBsYXknLCAnY29udGludWUnKSxcbiAgICAgICAgICBzdG9wOiB0aGlzLmFkZEJ1dHRvbignU3RvcCcsICdwcmltaXRpdmUtc3F1YXJlJywgJ3N0b3AnKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSBuZXcgRHJhZ2dhYmxlKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgb25EcmFnU3RhcnQ6ICgpID0+IHRoaXMuY2FuY2VsQnV0dG9uc0NsaWNrKClcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmRyYWdnYWJsZS5zZXQoYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpLmdldFdpZHRoKCkgLyAyIC0gODcvKnNpemUgb2YgdGhlIGVsZW1lbnQqLywgMzApXG4gICAgfVxufVxuXG5leHBvcnQgPSBEZWJ1Z1ZpZXdcbiJdfQ==