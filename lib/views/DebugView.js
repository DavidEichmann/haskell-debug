"use strict";
const Draggable = require("draggable");
const emissary = require("emissary");
const Button = require("./Button");
const _ = require("lodash");
class DebugView {
    constructor() {
        this.emitter = new emissary.Emitter();
        this.element = document.createElement('atom-panel');
        this.element.className = 'debug-toolbar padded';
        this.container = document.createElement('div');
        this.container.classList.add('btn-group');
        this.container.classList.add('btn-group-lg');
        this.element.appendChild(this.container);
        this.buttons = {
            step: this.addButton('Step forward', 'arrow-down', 'step'),
            back: this.addButton('Back in history', 'chevron-up', 'back'),
            forward: this.addButton('Forward in history', 'chevron-down', 'forward'),
            continue: this.addButton('Continue', 'playback-play', 'continue'),
            stop: this.addButton('Stop', 'primitive-square', 'stop')
        };
        this.draggable = new Draggable(this.element, {
            onDragStart: () => this.cancelButtonsClick()
        });
        this.draggable.set(atom.workspace.getActiveTextEditor().getWidth() / 2 - 87, 30);
    }
    addButton(description, icon, eventName) {
        const button = new Button(description, icon);
        button.emitter.on('click', () => this.emitter.emit(eventName));
        this.container.appendChild(button.element);
        return button;
    }
    cancelButtonsClick() {
        _.values(this.buttons).forEach((button) => button.startClick = false);
    }
    disableAllDebugButtons() {
        _.values(this.buttons).forEach((button) => {
            if (button !== this.buttons.stop) {
                button.isEnabled = false;
            }
        });
    }
    enableAllDebugButtons() {
        _.values(this.buttons).forEach((button) => {
            if (button !== this.buttons.stop) {
                button.isEnabled = true;
            }
        });
    }
    destroy() {
        for (const buttonName of Object.keys(this.buttons)) {
            const button = this.buttons[buttonName];
            button.destroy();
        }
    }
}
module.exports = DebugView;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpYi92aWV3cy9EZWJ1Z1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVDQUF1QztBQUN2QyxxQ0FBcUM7QUFDckMsbUNBQW1DO0FBQ25DLDRCQUE0QjtBQU01QjtJQXNESTtRQTdDTyxZQUFPLEdBQXFCLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBOENyRCxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDbkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUE7UUFFL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUN6QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUE7UUFFNUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRXhDLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQztZQUMxRCxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDO1lBQzdELE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUM7WUFDeEUsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxVQUFVLENBQUM7WUFDakUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sQ0FBQztTQUN6RCxDQUFBO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3pDLFdBQVcsRUFBRSxNQUFNLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtTQUMvQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBeUIsRUFBRSxDQUFDLENBQUE7SUFDM0csQ0FBQztJQTFETyxTQUFTLENBQUUsV0FBbUIsRUFBRSxJQUFZLEVBQUUsU0FBaUI7UUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFDOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRTFDLE1BQU0sQ0FBQyxNQUFNLENBQUE7SUFDakIsQ0FBQztJQUVPLGtCQUFrQjtRQUN0QixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQTtJQUN6RSxDQUFDO0lBRUQsc0JBQXNCO1FBQ2xCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU07WUFDbEMsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUE7WUFDNUIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVELHFCQUFxQjtRQUNqQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNO1lBQ2xDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFBO1lBQzNCLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRCxPQUFPO1FBQ0gsR0FBRyxDQUFDLENBQUMsTUFBTSxVQUFVLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ2hELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFXLENBQUE7WUFDakQsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ3BCLENBQUM7SUFDTCxDQUFDO0NBMEJKO0FBRUQsaUJBQVMsU0FBUyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERyYWdnYWJsZSA9IHJlcXVpcmUoJ2RyYWdnYWJsZScpXG5pbXBvcnQgZW1pc3NhcnkgPSByZXF1aXJlKCdlbWlzc2FyeScpXG5pbXBvcnQgQnV0dG9uID0gcmVxdWlyZSgnLi9CdXR0b24nKVxuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG5pbnRlcmZhY2UgRGVidWdWaWV3RW1pdHRlciBleHRlbmRzIEVtaXNzYXJ5LklFbWl0dGVyIHtcbiAgICBvbiAoZXZlbnROYW1lOiAnZm9yd2FyZCcgfCAnYmFjaycgfCAnY29udGludWUnIHwgJ3N0b3AnIHwgJ3N0ZXAnLCBoYW5kbGVyOiAoKSA9PiBhbnkpXG59XG5cbmNsYXNzIERlYnVnVmlldyAge1xuICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gICAgcHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50XG4gICAgcHJpdmF0ZSBkcmFnZ2FibGU6IERyYWdnYWJsZVxuXG4gICAgLyoqIEV2ZW50IEhhbmRsZXJcbiAgICAgICpcbiAgICAgICogRXZlbnRzIGNvcnJlc3BvbmQgdG8gdGhlIGJ1dHRvbiBwcmVzc2VkLiBUaGVzZSBhcmU6IGZvcndhcmQsIGJhY2ssIGNvbnRpbnVlIG9yIHN0b3AuXG4gICAgICAqL1xuICAgIHB1YmxpYyBlbWl0dGVyOiBEZWJ1Z1ZpZXdFbWl0dGVyID0gbmV3IGVtaXNzYXJ5LkVtaXR0ZXIoKVxuXG4gICAgYnV0dG9uczoge1xuICAgICAgICBzdGVwOiBCdXR0b25cbiAgICAgICAgYmFjazogQnV0dG9uXG4gICAgICAgIGZvcndhcmQ6IEJ1dHRvblxuICAgICAgICBjb250aW51ZTogQnV0dG9uXG4gICAgICAgIHN0b3A6IEJ1dHRvblxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkQnV0dG9uIChkZXNjcmlwdGlvbjogc3RyaW5nLCBpY29uOiBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IG5ldyBCdXR0b24oZGVzY3JpcHRpb24sIGljb24pXG4gICAgICAgIGJ1dHRvbi5lbWl0dGVyLm9uKCdjbGljaycsICgpID0+IHRoaXMuZW1pdHRlci5lbWl0KGV2ZW50TmFtZSkpXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbi5lbGVtZW50KVxuXG4gICAgICAgIHJldHVybiBidXR0b25cbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbmNlbEJ1dHRvbnNDbGljayAoKSB7XG4gICAgICAgIF8udmFsdWVzKHRoaXMuYnV0dG9ucykuZm9yRWFjaCgoYnV0dG9uKSA9PiBidXR0b24uc3RhcnRDbGljayA9IGZhbHNlKVxuICAgIH1cblxuICAgIGRpc2FibGVBbGxEZWJ1Z0J1dHRvbnMgKCkge1xuICAgICAgICBfLnZhbHVlcyh0aGlzLmJ1dHRvbnMpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbiAhPT0gdGhpcy5idXR0b25zLnN0b3ApIHtcbiAgICAgICAgICAgICAgICBidXR0b24uaXNFbmFibGVkID0gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlbmFibGVBbGxEZWJ1Z0J1dHRvbnMgKCkge1xuICAgICAgICBfLnZhbHVlcyh0aGlzLmJ1dHRvbnMpLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGJ1dHRvbiAhPT0gdGhpcy5idXR0b25zLnN0b3ApIHtcbiAgICAgICAgICAgICAgICBidXR0b24uaXNFbmFibGVkID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGRlc3Ryb3kgKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGJ1dHRvbk5hbWUgb2YgT2JqZWN0LmtleXModGhpcy5idXR0b25zKSl7XG4gICAgICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmJ1dHRvbnNbYnV0dG9uTmFtZV0gYXMgQnV0dG9uXG4gICAgICAgICAgICBidXR0b24uZGVzdHJveSgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2F0b20tcGFuZWwnKVxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NOYW1lID0gJ2RlYnVnLXRvb2xiYXIgcGFkZGVkJ1xuXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYnRuLWdyb3VwJylcbiAgICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnYnRuLWdyb3VwLWxnJylcblxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jb250YWluZXIpXG5cbiAgICAgICAgdGhpcy5idXR0b25zID0ge1xuICAgICAgICAgIHN0ZXA6IHRoaXMuYWRkQnV0dG9uKCdTdGVwIGZvcndhcmQnLCAnYXJyb3ctZG93bicsICdzdGVwJyksXG4gICAgICAgICAgYmFjazogdGhpcy5hZGRCdXR0b24oJ0JhY2sgaW4gaGlzdG9yeScsICdjaGV2cm9uLXVwJywgJ2JhY2snKSxcbiAgICAgICAgICBmb3J3YXJkOiB0aGlzLmFkZEJ1dHRvbignRm9yd2FyZCBpbiBoaXN0b3J5JywgJ2NoZXZyb24tZG93bicsICdmb3J3YXJkJyksXG4gICAgICAgICAgY29udGludWU6IHRoaXMuYWRkQnV0dG9uKCdDb250aW51ZScsICdwbGF5YmFjay1wbGF5JywgJ2NvbnRpbnVlJyksXG4gICAgICAgICAgc3RvcDogdGhpcy5hZGRCdXR0b24oJ1N0b3AnLCAncHJpbWl0aXZlLXNxdWFyZScsICdzdG9wJylcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlID0gbmV3IERyYWdnYWJsZSh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiAoKSA9PiB0aGlzLmNhbmNlbEJ1dHRvbnNDbGljaygpXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5kcmFnZ2FibGUuc2V0KGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKS5nZXRXaWR0aCgpIC8gMiAtIDg3LypzaXplIG9mIHRoZSBlbGVtZW50Ki8sIDMwKVxuICAgIH1cbn1cblxuZXhwb3J0ID0gRGVidWdWaWV3XG4iXX0=