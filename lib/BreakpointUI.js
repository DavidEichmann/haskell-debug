"use strict";
const atomAPI = require("atom");
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this.breakpoints = [];
        this.markers = new WeakMap();
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange(new atomAPI.Range([breakpoint.line - 1, 0], [breakpoint.line, 0]), {
            invalidate: 'inside'
        });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint'
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath()
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath()
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().scopes;
            if (scopes.length === 1 && scopes[0] === 'source.haskell'
                && atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
}
module.exports = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdDQUFnQztBQUNoQyw0QkFBNEI7QUFFNUI7SUFBQTtRQUNJLGdCQUFXLEdBQWlCLEVBQUUsQ0FBQTtRQUM5QixZQUFPLEdBQXVELElBQUksT0FBTyxFQUFFLENBQUE7SUF5RS9FLENBQUM7SUF2RVcsYUFBYSxDQUFFLFVBQXNCLEVBQUUsRUFBb0I7UUFDL0QsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUN2QyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMvRCxVQUFVLEVBQUUsUUFBUTtTQUN2QixDQUFDLENBQUE7UUFFTixFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFO1lBQ2hDLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSwwQkFBMEI7U0FDcEMsQ0FBQyxDQUFBO1FBRUYsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTTtZQUNoQyxVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUE7WUFDbEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1lBQzFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1FBRTlDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTyxrQkFBa0IsQ0FBRSxFQUFvQjtRQUM1QyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7U0FDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFFRCxnQkFBZ0IsQ0FBRSxVQUFrQixFQUFFLEVBQW9CO1FBQ3RELE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixJQUFJLEVBQUUsVUFBVTtTQUNuQixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQztnQkFDZixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7YUFDckIsRUFBa0IsRUFBRSxDQUFDLENBQUE7UUFDMUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVU7Z0JBQzNCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFFRCxxQkFBcUIsQ0FBRSxFQUFvQjtRQUV2QyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDekQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQWdCLENBQUE7UUFFaEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7WUFDOUIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsTUFBTSxDQUFBO1lBQ2pELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxnQkFBZ0I7bUJBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxNQUFNLFNBQVMsR0FBSSxFQUFFLENBQUMsTUFBc0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFBO2dCQUM5RCxFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFFMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsQ0FBQyxDQUFBO29CQUNqRixNQUFNLENBQUE7Z0JBQ1YsQ0FBQztnQkFFRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDOUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUN6QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDL0IsQ0FBQztDQUNKO0FBRUQsaUJBQVMsWUFBWSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKCdhdG9tJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcblxuY2xhc3MgQnJlYWtwb2ludFVJIHtcbiAgICBicmVha3BvaW50czogQnJlYWtwb2ludFtdID0gW11cbiAgICBtYXJrZXJzOiBXZWFrTWFwPEJyZWFrcG9pbnQsIEF0b21Db3JlLklEaXNwbGF5QnVmZmVyTWFya2VyPiA9IG5ldyBXZWFrTWFwKClcblxuICAgIHByaXZhdGUgc2V0QnJlYWtwb2ludCAoYnJlYWtwb2ludDogQnJlYWtwb2ludCwgdGU6IEF0b21Db3JlLklFZGl0b3IpIHtcbiAgICAgICAgY29uc3QgYnJlYWtwb2ludE1hcmtlciA9IHRlLm1hcmtCdWZmZXJSYW5nZShcbiAgICAgICAgICAgIG5ldyBhdG9tQVBJLlJhbmdlKFticmVha3BvaW50LmxpbmUgLSAxLCAwXSwgW2JyZWFrcG9pbnQubGluZSwgMF0pLCB7XG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZTogJ2luc2lkZSdcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgdGUuZGVjb3JhdGVNYXJrZXIoYnJlYWtwb2ludE1hcmtlciwge1xuICAgICAgICAgICAgdHlwZTogJ2xpbmUtbnVtYmVyJyxcbiAgICAgICAgICAgIGNsYXNzOiAnaGFza2VsbC1kZWJ1Zy1icmVha3BvaW50J1xuICAgICAgICB9KVxuXG4gICAgICAgIGJyZWFrcG9pbnRNYXJrZXIub25EaWRDaGFuZ2UoKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgYnJlYWtwb2ludC5saW5lID0gY2hhbmdlLm5ld0hlYWRCdWZmZXJQb3NpdGlvbi5yb3dcbiAgICAgICAgICAgIGlmICghY2hhbmdlLmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBfLnJlbW92ZSh0aGlzLmJyZWFrcG9pbnRzLCBicmVha3BvaW50KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMubWFya2Vycy5zZXQoYnJlYWtwb2ludCwgYnJlYWtwb2ludE1hcmtlcilcblxuICAgICAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goYnJlYWtwb2ludClcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEZpbGVCcmVha3BvaW50cyAodGU6IEF0b21Db3JlLklFZGl0b3IpIHtcbiAgICAgICAgXy5maWx0ZXIodGhpcy5icmVha3BvaW50cywge1xuICAgICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpXG4gICAgICAgIH0pLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHRoaXMuc2V0QnJlYWtwb2ludChicmVha3BvaW50LCB0ZSkpXG4gICAgfVxuXG4gICAgdG9nZ2xlQnJlYWtwb2ludCAobGluZU51bWJlcjogbnVtYmVyLCB0ZTogQXRvbUNvcmUuSUVkaXRvcikge1xuICAgICAgICBjb25zdCBicmVha3BvaW50cyA9IF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgICAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXJcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoYnJlYWtwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJyZWFrcG9pbnQoe1xuICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpXG4gICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgdGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha3BvaW50cy5mb3JFYWNoKChicmVha3BvaW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IHRoaXMubWFya2Vycy5nZXQoYnJlYWtwb2ludClcbiAgICAgICAgICAgICAgICBpZiAobSkgeyBtLmRlc3Ryb3koKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXR0YWNoVG9OZXdUZXh0RWRpdG9yICh0ZTogQXRvbUNvcmUuSUVkaXRvcikge1xuICAgICAgICAvLyBwYXRjaCB0aGUgdGV4dCBlZGl0b3IgdG8gYWRkIGJyZWFrcG9pbnRzIG9uIGNsaWNrXG4gICAgICAgIGNvbnN0IGxpbmVOdW1iZXJzTW9kYWwgPSB0ZS5ndXR0ZXJXaXRoTmFtZSgnbGluZS1udW1iZXInKVxuICAgICAgICBjb25zdCB2aWV3ID0gYXRvbS52aWV3cy5nZXRWaWV3KGxpbmVOdW1iZXJzTW9kYWwpIGFzIEhUTUxFbGVtZW50XG5cbiAgICAgICAgdmlldy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gdGUuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpLnNjb3Blc1xuICAgICAgICAgICAgaWYgKHNjb3Blcy5sZW5ndGggPT09IDEgJiYgc2NvcGVzWzBdID09PSAnc291cmNlLmhhc2tlbGwnXG4gICAgICAgICAgICAmJiBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuY2xpY2tHdXR0ZXJUb1RvZ2dsZUJyZWFrcG9pbnQnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlclJvdyA9IChldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQuYnVmZmVyUm93XG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlclJvdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJoYXNrZWxsLWRlYnVnOiBjbGljayBvbiBndXR0ZXIgZG9lc24ndCBoYXZlIGEgYnVmZmVyIHJvdyBwcm9wZXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gcGFyc2VJbnQoYnVmZmVyUm93LCAxMCkgKyAxXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVCcmVha3BvaW50KGxpbmVOdW1iZXIsIHRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuc2V0RmlsZUJyZWFrcG9pbnRzKHRlKVxuICAgIH1cbn1cblxuZXhwb3J0ID0gQnJlYWtwb2ludFVJXG4iXX0=