"use strict";
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this.breakpoints = [];
        this.markers = new WeakMap();
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange([[breakpoint.line - 1, 0], [breakpoint.line, 0]], { invalidate: 'inside' });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint'
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath()
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath()
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().getScopesArray();
            if (scopes.length === 1 && scopes[0] === 'source.haskell'
                && atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
}
module.exports = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLDRCQUE0QjtBQUU1QjtJQUFBO1FBQ0ksZ0JBQVcsR0FBaUIsRUFBRSxDQUFBO1FBQzlCLFlBQU8sR0FBK0MsSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQXdFdkUsQ0FBQztJQXRFVyxhQUFhLENBQUUsVUFBc0IsRUFBRSxFQUFzQjtRQUNqRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQ3ZDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDaEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUU3QixFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFO1lBQ2hDLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSwwQkFBMEI7U0FDcEMsQ0FBQyxDQUFBO1FBRUYsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTTtZQUNoQyxVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUE7WUFDbEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1lBQzFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1FBRTlDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTyxrQkFBa0IsQ0FBRSxFQUFzQjtRQUM5QyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7U0FDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2xFLENBQUM7SUFFRCxnQkFBZ0IsQ0FBRSxVQUFrQixFQUFFLEVBQXNCO1FBQ3hELE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixJQUFJLEVBQUUsVUFBVTtTQUNuQixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQztnQkFDZixJQUFJLEVBQUUsVUFBVTtnQkFDaEIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7YUFDckIsRUFBa0IsRUFBRSxDQUFDLENBQUE7UUFDMUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVU7Z0JBQzNCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFFRCxxQkFBcUIsQ0FBRSxFQUFzQjtRQUV6QyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDekQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQWdCLENBQUE7UUFFaEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUU7WUFDOUIsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDM0QsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLGdCQUFnQjttQkFDdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hFLE1BQU0sU0FBUyxHQUFJLEVBQUUsQ0FBQyxNQUFzQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUE7Z0JBQzlELEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO29CQUUxQixPQUFPLENBQUMsSUFBSSxDQUFDLG1FQUFtRSxDQUFDLENBQUE7b0JBQ2pGLE1BQU0sQ0FBQTtnQkFDVixDQUFDO2dCQUVELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUM5QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ3pDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUMvQixDQUFDO0NBQ0o7QUFFRCxpQkFBUyxZQUFZLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoJ2F0b20nKVxuaW1wb3J0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxuXG5jbGFzcyBCcmVha3BvaW50VUkge1xuICAgIGJyZWFrcG9pbnRzOiBCcmVha3BvaW50W10gPSBbXVxuICAgIG1hcmtlcnM6IFdlYWtNYXA8QnJlYWtwb2ludCwgYXRvbUFQSS5EaXNwbGF5TWFya2VyPiA9IG5ldyBXZWFrTWFwKClcblxuICAgIHByaXZhdGUgc2V0QnJlYWtwb2ludCAoYnJlYWtwb2ludDogQnJlYWtwb2ludCwgdGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgICAgICBjb25zdCBicmVha3BvaW50TWFya2VyID0gdGUubWFya0J1ZmZlclJhbmdlKFxuICAgICAgICAgICAgW1ticmVha3BvaW50LmxpbmUgLSAxLCAwXSwgW2JyZWFrcG9pbnQubGluZSwgMF1dLFxuICAgICAgICAgICAgeyBpbnZhbGlkYXRlOiAnaW5zaWRlJyB9KVxuXG4gICAgICAgIHRlLmRlY29yYXRlTWFya2VyKGJyZWFrcG9pbnRNYXJrZXIsIHtcbiAgICAgICAgICAgIHR5cGU6ICdsaW5lLW51bWJlcicsXG4gICAgICAgICAgICBjbGFzczogJ2hhc2tlbGwtZGVidWctYnJlYWtwb2ludCdcbiAgICAgICAgfSlcblxuICAgICAgICBicmVha3BvaW50TWFya2VyLm9uRGlkQ2hhbmdlKChjaGFuZ2UpID0+IHtcbiAgICAgICAgICAgIGJyZWFrcG9pbnQubGluZSA9IGNoYW5nZS5uZXdIZWFkQnVmZmVyUG9zaXRpb24ucm93XG4gICAgICAgICAgICBpZiAoIWNoYW5nZS5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywgYnJlYWtwb2ludClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLm1hcmtlcnMuc2V0KGJyZWFrcG9pbnQsIGJyZWFrcG9pbnRNYXJrZXIpXG5cbiAgICAgICAgdGhpcy5icmVha3BvaW50cy5wdXNoKGJyZWFrcG9pbnQpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRGaWxlQnJlYWtwb2ludHMgKHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICAgICAgXy5maWx0ZXIodGhpcy5icmVha3BvaW50cywge1xuICAgICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpXG4gICAgICAgIH0pLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHRoaXMuc2V0QnJlYWtwb2ludChicmVha3BvaW50LCB0ZSkpXG4gICAgfVxuXG4gICAgdG9nZ2xlQnJlYWtwb2ludCAobGluZU51bWJlcjogbnVtYmVyLCB0ZTogYXRvbUFQSS5UZXh0RWRpdG9yKSB7XG4gICAgICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywge1xuICAgICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgICAgICAgICAgbGluZTogbGluZU51bWJlclxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChicmVha3BvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QnJlYWtwb2ludCh7XG4gICAgICAgICAgICAgICAgbGluZTogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgICBmaWxlOiB0ZS5nZXRQYXRoKClcbiAgICAgICAgICAgIH0sICAgICAgICAgICAgICAgICB0ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtID0gdGhpcy5tYXJrZXJzLmdldChicmVha3BvaW50KVxuICAgICAgICAgICAgICAgIGlmIChtKSB7IG0uZGVzdHJveSgpIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhdHRhY2hUb05ld1RleHRFZGl0b3IgKHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICAgICAgLy8gcGF0Y2ggdGhlIHRleHQgZWRpdG9yIHRvIGFkZCBicmVha3BvaW50cyBvbiBjbGlja1xuICAgICAgICBjb25zdCBsaW5lTnVtYmVyc01vZGFsID0gdGUuZ3V0dGVyV2l0aE5hbWUoJ2xpbmUtbnVtYmVyJylcbiAgICAgICAgY29uc3QgdmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhsaW5lTnVtYmVyc01vZGFsKSBhcyBIVE1MRWxlbWVudFxuXG4gICAgICAgIHZpZXcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXYpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlcyA9IHRlLmdldFJvb3RTY29wZURlc2NyaXB0b3IoKS5nZXRTY29wZXNBcnJheSgpXG4gICAgICAgICAgICBpZiAoc2NvcGVzLmxlbmd0aCA9PT0gMSAmJiBzY29wZXNbMF0gPT09ICdzb3VyY2UuaGFza2VsbCdcbiAgICAgICAgICAgICYmIGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5jbGlja0d1dHRlclRvVG9nZ2xlQnJlYWtwb2ludCcpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyUm93ID0gKGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudCkuZGF0YXNldC5idWZmZXJSb3dcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyUm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImhhc2tlbGwtZGVidWc6IGNsaWNrIG9uIGd1dHRlciBkb2Vzbid0IGhhdmUgYSBidWZmZXIgcm93IHByb3BlcnR5XCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBwYXJzZUludChidWZmZXJSb3csIDEwKSArIDFcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlciwgdGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5zZXRGaWxlQnJlYWtwb2ludHModGUpXG4gICAgfVxufVxuXG5leHBvcnQgPSBCcmVha3BvaW50VUlcbiJdfQ==