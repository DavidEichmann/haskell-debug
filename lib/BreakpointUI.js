"use strict";
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this.breakpoints = [];
        this.markers = new WeakMap();
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange([[breakpoint.line - 1, 0], [breakpoint.line, 0]], { invalidate: 'inside' });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint'
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath()
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath()
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().getScopesArray();
            if (scopes.length === 1 && scopes[0] === 'source.haskell'
                && atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
}
module.exports = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLDRCQUE0QjtBQUU1QjtJQUFBO1FBQ0UsZ0JBQVcsR0FBaUIsRUFBRSxDQUFBO1FBQzlCLFlBQU8sR0FBK0MsSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQTJFckUsQ0FBQztJQXpFUyxhQUFhLENBQUMsVUFBc0IsRUFBRSxFQUFzQjtRQUNsRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQ3pDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDaEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQTtRQUUzQixFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFO1lBQ2xDLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSwwQkFBMEI7U0FDbEMsQ0FBQyxDQUFBO1FBRUYsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTTtZQUNsQyxVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUE7WUFDbEQsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1lBQ3hDLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFBO1FBRTlDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxFQUFzQjtRQUMvQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDekIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7U0FDbkIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2hFLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxVQUFrQixFQUFFLEVBQXNCO1FBQ3pELE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUM3QyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FDaEI7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO2FBQ25CLEVBQ0QsRUFBRSxDQUNILENBQUE7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVTtnQkFDN0IsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7Z0JBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO2dCQUFDLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUVELHFCQUFxQixDQUFDLEVBQXNCO1FBRTFDLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQTtRQUN6RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBZ0IsQ0FBQTtRQUVoRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtZQUNoQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQTtZQUMzRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssZ0JBQWdCO21CQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxTQUFTLEdBQUksRUFBRSxDQUFDLE1BQXNCLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQTtnQkFDOUQsRUFBRSxDQUFDLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBRTVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUVBQW1FLENBQUMsQ0FBQTtvQkFDakYsTUFBTSxDQUFBO2dCQUNSLENBQUM7Z0JBRUQsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQzlDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUE7WUFDdkMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQzdCLENBQUM7Q0FDRjtBQUVELGlCQUFTLFlBQVksQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhdG9tQVBJID0gcmVxdWlyZSgnYXRvbScpXG5pbXBvcnQgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpXG5cbmNsYXNzIEJyZWFrcG9pbnRVSSB7XG4gIGJyZWFrcG9pbnRzOiBCcmVha3BvaW50W10gPSBbXVxuICBtYXJrZXJzOiBXZWFrTWFwPEJyZWFrcG9pbnQsIGF0b21BUEkuRGlzcGxheU1hcmtlcj4gPSBuZXcgV2Vha01hcCgpXG5cbiAgcHJpdmF0ZSBzZXRCcmVha3BvaW50KGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQsIHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICBjb25zdCBicmVha3BvaW50TWFya2VyID0gdGUubWFya0J1ZmZlclJhbmdlKFxuICAgICAgW1ticmVha3BvaW50LmxpbmUgLSAxLCAwXSwgW2JyZWFrcG9pbnQubGluZSwgMF1dLFxuICAgICAgeyBpbnZhbGlkYXRlOiAnaW5zaWRlJyB9KVxuXG4gICAgdGUuZGVjb3JhdGVNYXJrZXIoYnJlYWtwb2ludE1hcmtlciwge1xuICAgICAgdHlwZTogJ2xpbmUtbnVtYmVyJyxcbiAgICAgIGNsYXNzOiAnaGFza2VsbC1kZWJ1Zy1icmVha3BvaW50J1xuICAgIH0pXG5cbiAgICBicmVha3BvaW50TWFya2VyLm9uRGlkQ2hhbmdlKChjaGFuZ2UpID0+IHtcbiAgICAgIGJyZWFrcG9pbnQubGluZSA9IGNoYW5nZS5uZXdIZWFkQnVmZmVyUG9zaXRpb24ucm93XG4gICAgICBpZiAoIWNoYW5nZS5pc1ZhbGlkKSB7XG4gICAgICAgIF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIGJyZWFrcG9pbnQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMubWFya2Vycy5zZXQoYnJlYWtwb2ludCwgYnJlYWtwb2ludE1hcmtlcilcblxuICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChicmVha3BvaW50KVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRGaWxlQnJlYWtwb2ludHModGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIF8uZmlsdGVyKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgIGZpbGU6IHRlLmdldFBhdGgoKVxuICAgIH0pLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHRoaXMuc2V0QnJlYWtwb2ludChicmVha3BvaW50LCB0ZSkpXG4gIH1cblxuICB0b2dnbGVCcmVha3BvaW50KGxpbmVOdW1iZXI6IG51bWJlciwgdGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRzID0gXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywge1xuICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgICAgbGluZTogbGluZU51bWJlclxuICAgIH0pXG5cbiAgICBpZiAoYnJlYWtwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnNldEJyZWFrcG9pbnQoXG4gICAgICAgIHtcbiAgICAgICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgICAgICAgIGZpbGU6IHRlLmdldFBhdGgoKVxuICAgICAgICB9LFxuICAgICAgICB0ZVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICBicmVha3BvaW50cy5mb3JFYWNoKChicmVha3BvaW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG0gPSB0aGlzLm1hcmtlcnMuZ2V0KGJyZWFrcG9pbnQpXG4gICAgICAgIGlmIChtKSB7IG0uZGVzdHJveSgpIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYXR0YWNoVG9OZXdUZXh0RWRpdG9yKHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICAvLyBwYXRjaCB0aGUgdGV4dCBlZGl0b3IgdG8gYWRkIGJyZWFrcG9pbnRzIG9uIGNsaWNrXG4gICAgY29uc3QgbGluZU51bWJlcnNNb2RhbCA9IHRlLmd1dHRlcldpdGhOYW1lKCdsaW5lLW51bWJlcicpXG4gICAgY29uc3QgdmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhsaW5lTnVtYmVyc01vZGFsKSBhcyBIVE1MRWxlbWVudFxuXG4gICAgdmlldy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xuICAgICAgY29uc3Qgc2NvcGVzID0gdGUuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpLmdldFNjb3Blc0FycmF5KClcbiAgICAgIGlmIChzY29wZXMubGVuZ3RoID09PSAxICYmIHNjb3Blc1swXSA9PT0gJ3NvdXJjZS5oYXNrZWxsJ1xuICAgICAgICAmJiBhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuY2xpY2tHdXR0ZXJUb1RvZ2dsZUJyZWFrcG9pbnQnKSkge1xuICAgICAgICBjb25zdCBidWZmZXJSb3cgPSAoZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5kYXRhc2V0LmJ1ZmZlclJvd1xuICAgICAgICBpZiAoYnVmZmVyUm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJoYXNrZWxsLWRlYnVnOiBjbGljayBvbiBndXR0ZXIgZG9lc24ndCBoYXZlIGEgYnVmZmVyIHJvdyBwcm9wZXJ0eVwiKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IHBhcnNlSW50KGJ1ZmZlclJvdywgMTApICsgMVxuICAgICAgICB0aGlzLnRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlciwgdGUpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuc2V0RmlsZUJyZWFrcG9pbnRzKHRlKVxuICB9XG59XG5cbmV4cG9ydCA9IEJyZWFrcG9pbnRVSVxuIl19