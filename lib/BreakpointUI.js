"use strict";
const atomAPI = require("atom");
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this.breakpoints = [];
        this.markers = new WeakMap();
    }
    setBreakpoint(breakpoint, te) {
        let breakpointMarker = te.markBufferRange(new atomAPI.Range([breakpoint.line - 1, 0], [breakpoint.line, 0]), {
            invalidate: "inside"
        });
        te.decorateMarker(breakpointMarker, {
            type: "line-number",
            class: "haskell-debug-breakpoint"
        });
        breakpointMarker.onDidChange(change => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath()
        }).forEach(breakpoint => this.setBreakpoint(breakpoint, te));
    }
    toggleBreakpoint(lineNumber, te) {
        var breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath()
            }, te);
        }
        else {
            breakpoints.forEach(breakpoint => {
                this.markers.get(breakpoint).destroy();
            });
        }
    }
    attachToNewTextEditor(te) {
        var lineNumbersModal = te.gutterWithName("line-number");
        var view = atom.views.getView(lineNumbersModal);
        view.addEventListener("click", ev => {
            var scopes = te.getRootScopeDescriptor().scopes;
            if (scopes.length == 1 && scopes[0] == "source.haskell"
                && atom.config.get("haskell-debug.clickGutterToToggleBreakpoint")) {
                if (ev["path"][0].dataset.bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                var lineNumber = parseInt(ev["path"][0].dataset.bufferRow) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
}
module.exports = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdDQUFpQztBQUNqQyw0QkFBNkI7QUFFN0I7SUFBQTtRQUNJLGdCQUFXLEdBQWlCLEVBQUUsQ0FBQztRQUMvQixZQUFPLEdBQXVELElBQUksT0FBTyxFQUFFLENBQUM7SUF1RWhGLENBQUM7SUFyRVcsYUFBYSxDQUFDLFVBQXNCLEVBQUUsRUFBb0I7UUFDOUQsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUNyQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMvRCxVQUFVLEVBQUUsUUFBUTtTQUN2QixDQUFDLENBQUM7UUFFUCxFQUFFLENBQUMsY0FBYyxDQUFDLGdCQUFnQixFQUFFO1lBQ2hDLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSwwQkFBMEI7U0FDcEMsQ0FBQyxDQUFBO1FBRUYsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLE1BQU07WUFDL0IsVUFBVSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxDQUFDO1lBQ25ELEVBQUUsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7Z0JBQ2hCLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUMzQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU8sa0JBQWtCLENBQUMsRUFBb0I7UUFDM0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3ZCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO1NBQ3JCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVELGdCQUFnQixDQUFDLFVBQWtCLEVBQUUsRUFBb0I7UUFDckQsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3pDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ2xCLElBQUksRUFBRSxVQUFVO1NBQ25CLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUN6QixJQUFJLENBQUMsYUFBYSxDQUFDO2dCQUNmLElBQUksRUFBRSxVQUFVO2dCQUNoQixJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTthQUNyQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ1gsQ0FBQztRQUNELElBQUksQ0FBQSxDQUFDO1lBQ0QsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVO2dCQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMzQyxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUM7SUFDTCxDQUFDO0lBRUQscUJBQXFCLENBQUMsRUFBb0I7UUFFdEMsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELElBQUksSUFBSSxHQUFnQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM3QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDaEQsRUFBRSxDQUFBLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLGdCQUFnQjttQkFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQyxDQUFBLENBQUM7Z0JBQy9ELEVBQUUsQ0FBQSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxDQUFBLENBQUM7b0JBQzlDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUVBQW1FLENBQUMsQ0FBQztvQkFDbEYsTUFBTSxDQUFDO2dCQUNYLENBQUM7Z0JBRUQsSUFBSSxVQUFVLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUMvRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0NBQ0o7QUFFRCxpQkFBUyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoXCJhdG9tXCIpO1xuaW1wb3J0IF8gPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuXG5jbGFzcyBCcmVha3BvaW50VUkge1xuICAgIGJyZWFrcG9pbnRzOiBCcmVha3BvaW50W10gPSBbXTtcbiAgICBtYXJrZXJzOiBXZWFrTWFwPEJyZWFrcG9pbnQsIEF0b21Db3JlLklEaXNwbGF5QnVmZmVyTWFya2VyPiA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgICBwcml2YXRlIHNldEJyZWFrcG9pbnQoYnJlYWtwb2ludDogQnJlYWtwb2ludCwgdGU6IEF0b21Db3JlLklFZGl0b3Ipe1xuICAgICAgICBsZXQgYnJlYWtwb2ludE1hcmtlciA9IHRlLm1hcmtCdWZmZXJSYW5nZShcbiAgICAgICAgICAgIG5ldyBhdG9tQVBJLlJhbmdlKFticmVha3BvaW50LmxpbmUgLSAxLCAwXSwgW2JyZWFrcG9pbnQubGluZSwgMF0pLCB7XG4gICAgICAgICAgICAgICAgaW52YWxpZGF0ZTogXCJpbnNpZGVcIlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGUuZGVjb3JhdGVNYXJrZXIoYnJlYWtwb2ludE1hcmtlciwge1xuICAgICAgICAgICAgdHlwZTogXCJsaW5lLW51bWJlclwiLFxuICAgICAgICAgICAgY2xhc3M6IFwiaGFza2VsbC1kZWJ1Zy1icmVha3BvaW50XCJcbiAgICAgICAgfSlcblxuICAgICAgICBicmVha3BvaW50TWFya2VyLm9uRGlkQ2hhbmdlKGNoYW5nZSA9PiB7XG4gICAgICAgICAgICBicmVha3BvaW50LmxpbmUgPSBjaGFuZ2UubmV3SGVhZEJ1ZmZlclBvc2l0aW9uLnJvdztcbiAgICAgICAgICAgIGlmKCFjaGFuZ2UuaXNWYWxpZCl7XG4gICAgICAgICAgICAgICAgXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywgYnJlYWtwb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5tYXJrZXJzLnNldChicmVha3BvaW50LCBicmVha3BvaW50TWFya2VyKTtcblxuICAgICAgICB0aGlzLmJyZWFrcG9pbnRzLnB1c2goYnJlYWtwb2ludCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRGaWxlQnJlYWtwb2ludHModGU6IEF0b21Db3JlLklFZGl0b3Ipe1xuICAgICAgICBfLmZpbHRlcih0aGlzLmJyZWFrcG9pbnRzLCB7XG4gICAgICAgICAgICBmaWxlOiB0ZS5nZXRQYXRoKClcbiAgICAgICAgfSkuZm9yRWFjaChicmVha3BvaW50ID0+IHRoaXMuc2V0QnJlYWtwb2ludChicmVha3BvaW50LCB0ZSkpO1xuICAgIH1cblxuICAgIHRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlcjogbnVtYmVyLCB0ZTogQXRvbUNvcmUuSUVkaXRvcil7XG4gICAgICAgIHZhciBicmVha3BvaW50cyA9IF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgICAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXJcbiAgICAgICAgfSlcblxuICAgICAgICBpZihicmVha3BvaW50cy5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgdGhpcy5zZXRCcmVha3BvaW50KHtcbiAgICAgICAgICAgICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgICAgIGZpbGU6IHRlLmdldFBhdGgoKVxuICAgICAgICAgICAgfSwgdGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBicmVha3BvaW50cy5mb3JFYWNoKGJyZWFrcG9pbnQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWFya2Vycy5nZXQoYnJlYWtwb2ludCkuZGVzdHJveSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGF0dGFjaFRvTmV3VGV4dEVkaXRvcih0ZTogQXRvbUNvcmUuSUVkaXRvcil7XG4gICAgICAgIC8vIHBhdGNoIHRoZSB0ZXh0IGVkaXRvciB0byBhZGQgYnJlYWtwb2ludHMgb24gY2xpY2tcbiAgICAgICAgdmFyIGxpbmVOdW1iZXJzTW9kYWwgPSB0ZS5ndXR0ZXJXaXRoTmFtZShcImxpbmUtbnVtYmVyXCIpO1xuICAgICAgICB2YXIgdmlldyA9IDxIVE1MRWxlbWVudD5hdG9tLnZpZXdzLmdldFZpZXcobGluZU51bWJlcnNNb2RhbCk7XG5cbiAgICAgICAgdmlldy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXYgPT4ge1xuICAgICAgICAgICAgdmFyIHNjb3BlcyA9IHRlLmdldFJvb3RTY29wZURlc2NyaXB0b3IoKS5zY29wZXM7XG4gICAgICAgICAgICBpZihzY29wZXMubGVuZ3RoID09IDEgJiYgc2NvcGVzWzBdID09IFwic291cmNlLmhhc2tlbGxcIlxuICAgICAgICAgICAgJiYgYXRvbS5jb25maWcuZ2V0KFwiaGFza2VsbC1kZWJ1Zy5jbGlja0d1dHRlclRvVG9nZ2xlQnJlYWtwb2ludFwiKSl7XG4gICAgICAgICAgICAgICAgaWYoZXZbXCJwYXRoXCJdWzBdLmRhdGFzZXQuYnVmZmVyUm93ID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJoYXNrZWxsLWRlYnVnOiBjbGljayBvbiBndXR0ZXIgZG9lc24ndCBoYXZlIGEgYnVmZmVyIHJvdyBwcm9wZXJ0eVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBsaW5lTnVtYmVyID0gcGFyc2VJbnQoZXZbXCJwYXRoXCJdWzBdLmRhdGFzZXQuYnVmZmVyUm93KSArIDE7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVCcmVha3BvaW50KGxpbmVOdW1iZXIsIHRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnNldEZpbGVCcmVha3BvaW50cyh0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgPSBCcmVha3BvaW50VUk7XG4iXX0=