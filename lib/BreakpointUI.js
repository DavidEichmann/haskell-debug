"use strict";
const atomAPI = require("atom");
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this.breakpoints = [];
        this.markers = new WeakMap();
    }
    setBreakpoint(breakpoint, te) {
        let breakpointMarker = te.markBufferRange(new atomAPI.Range([breakpoint.line - 1, 0], [breakpoint.line, 0]), {
            invalidate: "inside"
        });
        te.decorateMarker(breakpointMarker, {
            type: "line-number",
            class: "haskell-debug-breakpoint"
        });
        breakpointMarker.onDidChange(change => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath()
        }).forEach(breakpoint => this.setBreakpoint(breakpoint, te));
    }
    toggleBreakpoint(lineNumber, te) {
        var breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath()
            }, te);
        }
        else {
            breakpoints.forEach(breakpoint => {
                this.markers.get(breakpoint).destroy();
            });
        }
    }
    attachToNewTextEditor(te) {
        var lineNumbersModal = te.gutterWithName("line-number");
        var view = atom.views.getView(lineNumbersModal);
        view.addEventListener("click", ev => {
            var scopes = te.getRootScopeDescriptor().scopes;
            if (scopes.length == 1 && scopes[0] == "source.haskell"
                && atom.config.get("haskell-debug.clickGutterToToggleBreakpoint")) {
                if (ev["path"][0].dataset.bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                var lineNumber = parseInt(ev["path"][0].dataset.bufferRow) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
}
module.exports = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0JyZWFrcG9pbnRVSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsZ0NBQWlDO0FBQ2pDLDRCQUE2QjtBQUU3QjtJQUFBO1FBQ0ksZ0JBQVcsR0FBaUIsRUFBRSxDQUFDO1FBQy9CLFlBQU8sR0FBdUQsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQXVFaEYsQ0FBQztJQXJFVyxhQUFhLENBQUMsVUFBc0IsRUFBRSxFQUFvQjtRQUM5RCxJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQy9ELFVBQVUsRUFBRSxRQUFRO1NBQ3ZCLENBQUMsQ0FBQztRQUVQLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUU7WUFDaEMsSUFBSSxFQUFFLGFBQWE7WUFDbkIsS0FBSyxFQUFFLDBCQUEwQjtTQUNwQyxDQUFDLENBQUE7UUFFRixnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsTUFBTTtZQUMvQixVQUFVLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUM7WUFDbkQsRUFBRSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQztnQkFDaEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxFQUFvQjtRQUMzQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDdkIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7U0FDckIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsVUFBa0IsRUFBRSxFQUFvQjtRQUNyRCxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDekMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7WUFDbEIsSUFBSSxFQUFFLFVBQVU7U0FDbkIsQ0FBQyxDQUFBO1FBRUYsRUFBRSxDQUFBLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUM7Z0JBQ2YsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO2FBQ3JCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDWCxDQUFDO1FBQ0QsSUFBSSxDQUFBLENBQUM7WUFDRCxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVU7Z0JBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFBO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxFQUFvQjtRQUV0QyxJQUFJLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsSUFBSSxJQUFJLEdBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzdCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUNoRCxFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksZ0JBQWdCO21CQUNuRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUEsQ0FBQztnQkFDL0QsRUFBRSxDQUFBLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUEsQ0FBQztvQkFDOUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsQ0FBQyxDQUFDO29CQUNsRixNQUFNLENBQUM7Z0JBQ1gsQ0FBQztnQkFFRCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQy9ELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FDSjtBQUVELGlCQUFTLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhdG9tQVBJID0gcmVxdWlyZShcImF0b21cIik7XG5pbXBvcnQgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG5cbmNsYXNzIEJyZWFrcG9pbnRVSSB7XG4gICAgYnJlYWtwb2ludHM6IEJyZWFrcG9pbnRbXSA9IFtdO1xuICAgIG1hcmtlcnM6IFdlYWtNYXA8QnJlYWtwb2ludCwgQXRvbUNvcmUuSURpc3BsYXlCdWZmZXJNYXJrZXI+ID0gbmV3IFdlYWtNYXAoKTtcblxuICAgIHByaXZhdGUgc2V0QnJlYWtwb2ludChicmVha3BvaW50OiBCcmVha3BvaW50LCB0ZTogQXRvbUNvcmUuSUVkaXRvcil7XG4gICAgICAgIGxldCBicmVha3BvaW50TWFya2VyID0gdGUubWFya0J1ZmZlclJhbmdlKFxuICAgICAgICAgICAgbmV3IGF0b21BUEkuUmFuZ2UoW2JyZWFrcG9pbnQubGluZSAtIDEsIDBdLCBbYnJlYWtwb2ludC5saW5lLCAwXSksIHtcbiAgICAgICAgICAgICAgICBpbnZhbGlkYXRlOiBcImluc2lkZVwiXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB0ZS5kZWNvcmF0ZU1hcmtlcihicmVha3BvaW50TWFya2VyLCB7XG4gICAgICAgICAgICB0eXBlOiBcImxpbmUtbnVtYmVyXCIsXG4gICAgICAgICAgICBjbGFzczogXCJoYXNrZWxsLWRlYnVnLWJyZWFrcG9pbnRcIlxuICAgICAgICB9KVxuXG4gICAgICAgIGJyZWFrcG9pbnRNYXJrZXIub25EaWRDaGFuZ2UoY2hhbmdlID0+IHtcbiAgICAgICAgICAgIGJyZWFrcG9pbnQubGluZSA9IGNoYW5nZS5uZXdIZWFkQnVmZmVyUG9zaXRpb24ucm93O1xuICAgICAgICAgICAgaWYoIWNoYW5nZS5pc1ZhbGlkKXtcbiAgICAgICAgICAgICAgICBfLnJlbW92ZSh0aGlzLmJyZWFrcG9pbnRzLCBicmVha3BvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLm1hcmtlcnMuc2V0KGJyZWFrcG9pbnQsIGJyZWFrcG9pbnRNYXJrZXIpO1xuXG4gICAgICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChicmVha3BvaW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEZpbGVCcmVha3BvaW50cyh0ZTogQXRvbUNvcmUuSUVkaXRvcil7XG4gICAgICAgIF8uZmlsdGVyKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgICAgICAgIGZpbGU6IHRlLmdldFBhdGgoKVxuICAgICAgICB9KS5mb3JFYWNoKGJyZWFrcG9pbnQgPT4gdGhpcy5zZXRCcmVha3BvaW50KGJyZWFrcG9pbnQsIHRlKSk7XG4gICAgfVxuXG4gICAgdG9nZ2xlQnJlYWtwb2ludChsaW5lTnVtYmVyOiBudW1iZXIsIHRlOiBBdG9tQ29yZS5JRWRpdG9yKXtcbiAgICAgICAgdmFyIGJyZWFrcG9pbnRzID0gXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywge1xuICAgICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgICAgICAgICAgbGluZTogbGluZU51bWJlclxuICAgICAgICB9KVxuXG4gICAgICAgIGlmKGJyZWFrcG9pbnRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgICAgICB0aGlzLnNldEJyZWFrcG9pbnQoe1xuICAgICAgICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpXG4gICAgICAgICAgICB9LCB0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJzLmdldChicmVha3BvaW50KS5kZXN0cm95KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXR0YWNoVG9OZXdUZXh0RWRpdG9yKHRlOiBBdG9tQ29yZS5JRWRpdG9yKXtcbiAgICAgICAgLy8gcGF0Y2ggdGhlIHRleHQgZWRpdG9yIHRvIGFkZCBicmVha3BvaW50cyBvbiBjbGlja1xuICAgICAgICB2YXIgbGluZU51bWJlcnNNb2RhbCA9IHRlLmd1dHRlcldpdGhOYW1lKFwibGluZS1udW1iZXJcIik7XG4gICAgICAgIHZhciB2aWV3ID0gPEhUTUxFbGVtZW50PmF0b20udmlld3MuZ2V0VmlldyhsaW5lTnVtYmVyc01vZGFsKTtcblxuICAgICAgICB2aWV3LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBldiA9PiB7XG4gICAgICAgICAgICB2YXIgc2NvcGVzID0gdGUuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpLnNjb3BlcztcbiAgICAgICAgICAgIGlmKHNjb3Blcy5sZW5ndGggPT0gMSAmJiBzY29wZXNbMF0gPT0gXCJzb3VyY2UuaGFza2VsbFwiXG4gICAgICAgICAgICAmJiBhdG9tLmNvbmZpZy5nZXQoXCJoYXNrZWxsLWRlYnVnLmNsaWNrR3V0dGVyVG9Ub2dnbGVCcmVha3BvaW50XCIpKXtcbiAgICAgICAgICAgICAgICBpZihldltcInBhdGhcIl1bMF0uZGF0YXNldC5idWZmZXJSb3cgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImhhc2tlbGwtZGVidWc6IGNsaWNrIG9uIGd1dHRlciBkb2Vzbid0IGhhdmUgYSBidWZmZXIgcm93IHByb3BlcnR5XCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVOdW1iZXIgPSBwYXJzZUludChldltcInBhdGhcIl1bMF0uZGF0YXNldC5idWZmZXJSb3cpICsgMTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlciwgdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuc2V0RmlsZUJyZWFrcG9pbnRzKHRlKTtcbiAgICB9XG59XG5cbmV4cG9ydCA9IEJyZWFrcG9pbnRVSTtcbiJdfQ==