"use strict";
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this._breakpoints = [];
        this.markers = new WeakMap();
    }
    get breakpoints() {
        return this._breakpoints;
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber,
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath(),
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().getScopesArray();
            if (scopes.length === 1 && scopes[0] === 'source.haskell'
                && atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange([[breakpoint.line - 1, 0], [breakpoint.line, 0]], { invalidate: 'inside' });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint',
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath(),
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
}
module.exports = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2xpYi9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLDRCQUE0QjtBQUU1QjtJQUFBO1FBQ1UsaUJBQVksR0FBaUIsRUFBRSxDQUFBO1FBQy9CLFlBQU8sR0FBK0MsSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQStFN0UsQ0FBQztJQTdFQyxJQUFXLFdBQVc7UUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUE7SUFDMUIsQ0FBQztJQUVNLGdCQUFnQixDQUFDLFVBQWtCLEVBQUUsRUFBc0I7UUFDaEUsTUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzdDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ2xCLElBQUksRUFBRSxVQUFVO1NBQ2pCLENBQUMsQ0FBQTtRQUVGLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsYUFBYSxDQUNoQjtnQkFDRSxJQUFJLEVBQUUsVUFBVTtnQkFDaEIsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7YUFDbkIsRUFDRCxFQUFFLENBQ0gsQ0FBQTtRQUNILENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVO2dCQUM3QixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQTtnQkFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7Z0JBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7SUFDSCxDQUFDO0lBRU0scUJBQXFCLENBQUMsRUFBc0I7UUFFakQsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFBO1FBQ3pELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFnQixDQUFBO1FBRWhFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFBO1lBQzNELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxnQkFBZ0I7bUJBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwRSxNQUFNLFNBQVMsR0FBSSxFQUFFLENBQUMsTUFBc0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFBO2dCQUM5RCxFQUFFLENBQUMsQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFFNUIsT0FBTyxDQUFDLElBQUksQ0FBQyxtRUFBbUUsQ0FBQyxDQUFBO29CQUNqRixNQUFNLENBQUE7Z0JBQ1IsQ0FBQztnQkFFRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDOUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUN2QyxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUVPLGFBQWEsQ0FBQyxVQUFzQixFQUFFLEVBQXNCO1FBQ2xFLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FDekMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNoRCxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFBO1FBRTNCLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLEVBQUU7WUFDbEMsSUFBSSxFQUFFLGFBQWE7WUFDbkIsS0FBSyxFQUFFLDBCQUEwQjtTQUNsQyxDQUFDLENBQUE7UUFFRixnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNO1lBQ2xDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQTtZQUNsRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNwQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUE7WUFDeEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUE7UUFFOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVPLGtCQUFrQixDQUFDLEVBQXNCO1FBQy9DLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN6QixJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtTQUNuQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDaEUsQ0FBQztDQUNGO0FBRUQsaUJBQVMsWUFBWSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKCdhdG9tJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcblxuY2xhc3MgQnJlYWtwb2ludFVJIHtcbiAgcHJpdmF0ZSBfYnJlYWtwb2ludHM6IEJyZWFrcG9pbnRbXSA9IFtdXG4gIHByaXZhdGUgbWFya2VyczogV2Vha01hcDxCcmVha3BvaW50LCBhdG9tQVBJLkRpc3BsYXlNYXJrZXI+ID0gbmV3IFdlYWtNYXAoKVxuXG4gIHB1YmxpYyBnZXQgYnJlYWtwb2ludHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JyZWFrcG9pbnRzXG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlQnJlYWtwb2ludChsaW5lTnVtYmVyOiBudW1iZXIsIHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICBjb25zdCBicmVha3BvaW50cyA9IF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgfSlcblxuICAgIGlmIChicmVha3BvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuc2V0QnJlYWtwb2ludChcbiAgICAgICAge1xuICAgICAgICAgIGxpbmU6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgICAgICB9LFxuICAgICAgICB0ZSxcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtwb2ludHMuZm9yRWFjaCgoYnJlYWtwb2ludCkgPT4ge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5tYXJrZXJzLmdldChicmVha3BvaW50KVxuICAgICAgICBpZiAobSkgeyBtLmRlc3Ryb3koKSB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhdHRhY2hUb05ld1RleHRFZGl0b3IodGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIC8vIHBhdGNoIHRoZSB0ZXh0IGVkaXRvciB0byBhZGQgYnJlYWtwb2ludHMgb24gY2xpY2tcbiAgICBjb25zdCBsaW5lTnVtYmVyc01vZGFsID0gdGUuZ3V0dGVyV2l0aE5hbWUoJ2xpbmUtbnVtYmVyJylcbiAgICBjb25zdCB2aWV3ID0gYXRvbS52aWV3cy5nZXRWaWV3KGxpbmVOdW1iZXJzTW9kYWwpIGFzIEhUTUxFbGVtZW50XG5cbiAgICB2aWV3LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2KSA9PiB7XG4gICAgICBjb25zdCBzY29wZXMgPSB0ZS5nZXRSb290U2NvcGVEZXNjcmlwdG9yKCkuZ2V0U2NvcGVzQXJyYXkoKVxuICAgICAgaWYgKHNjb3Blcy5sZW5ndGggPT09IDEgJiYgc2NvcGVzWzBdID09PSAnc291cmNlLmhhc2tlbGwnXG4gICAgICAgICYmIGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5jbGlja0d1dHRlclRvVG9nZ2xlQnJlYWtwb2ludCcpKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlclJvdyA9IChldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmRhdGFzZXQuYnVmZmVyUm93XG4gICAgICAgIGlmIChidWZmZXJSb3cgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybihcImhhc2tlbGwtZGVidWc6IGNsaWNrIG9uIGd1dHRlciBkb2Vzbid0IGhhdmUgYSBidWZmZXIgcm93IHByb3BlcnR5XCIpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaW5lTnVtYmVyID0gcGFyc2VJbnQoYnVmZmVyUm93LCAxMCkgKyAxXG4gICAgICAgIHRoaXMudG9nZ2xlQnJlYWtwb2ludChsaW5lTnVtYmVyLCB0ZSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5zZXRGaWxlQnJlYWtwb2ludHModGUpXG4gIH1cblxuICBwcml2YXRlIHNldEJyZWFrcG9pbnQoYnJlYWtwb2ludDogQnJlYWtwb2ludCwgdGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRNYXJrZXIgPSB0ZS5tYXJrQnVmZmVyUmFuZ2UoXG4gICAgICBbW2JyZWFrcG9pbnQubGluZSAtIDEsIDBdLCBbYnJlYWtwb2ludC5saW5lLCAwXV0sXG4gICAgICB7IGludmFsaWRhdGU6ICdpbnNpZGUnIH0pXG5cbiAgICB0ZS5kZWNvcmF0ZU1hcmtlcihicmVha3BvaW50TWFya2VyLCB7XG4gICAgICB0eXBlOiAnbGluZS1udW1iZXInLFxuICAgICAgY2xhc3M6ICdoYXNrZWxsLWRlYnVnLWJyZWFrcG9pbnQnLFxuICAgIH0pXG5cbiAgICBicmVha3BvaW50TWFya2VyLm9uRGlkQ2hhbmdlKChjaGFuZ2UpID0+IHtcbiAgICAgIGJyZWFrcG9pbnQubGluZSA9IGNoYW5nZS5uZXdIZWFkQnVmZmVyUG9zaXRpb24ucm93XG4gICAgICBpZiAoIWNoYW5nZS5pc1ZhbGlkKSB7XG4gICAgICAgIF8ucmVtb3ZlKHRoaXMuYnJlYWtwb2ludHMsIGJyZWFrcG9pbnQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMubWFya2Vycy5zZXQoYnJlYWtwb2ludCwgYnJlYWtwb2ludE1hcmtlcilcblxuICAgIHRoaXMuYnJlYWtwb2ludHMucHVzaChicmVha3BvaW50KVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRGaWxlQnJlYWtwb2ludHModGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIF8uZmlsdGVyKHRoaXMuYnJlYWtwb2ludHMsIHtcbiAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICB9KS5mb3JFYWNoKChicmVha3BvaW50KSA9PiB0aGlzLnNldEJyZWFrcG9pbnQoYnJlYWtwb2ludCwgdGUpKVxuICB9XG59XG5cbmV4cG9ydCA9IEJyZWFrcG9pbnRVSVxuIl19