"use strict";
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32' ?
            '\\\\.\\pipe\\' + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${atom.packages.getActivePackage('haskell-debug').path}/lib/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close');
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    prompt() {
        this.send({
            type: 'user_input'
        });
    }
    write(output) {
        this.send({
            type: 'message',
            content: output
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close'
            });
            this.process.kill();
        }
        this.server.close();
    }
}
module.exports = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0NBQW9DO0FBQ3BDLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUVoQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUE7QUFFakM7SUFvRUk7UUE1REEsWUFBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBc0J2QixlQUFVLEdBQUcsRUFBRSxDQUFBO1FBZWYsY0FBUyxHQUFHLEVBQUUsQ0FBQTtRQXdCbEIsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU87WUFDNUMsZUFBZSxHQUFHLFNBQVMsR0FBRyxRQUFRLFNBQVMsT0FBTyxDQUFBO1FBQzFELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksc0JBQXNCLENBQUE7UUFFdEcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTTtZQUNsQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtZQUNwQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUN0QyxDQUFDO1lBQ0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQzlDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFO2dCQUNiLElBQUksQ0FBQyxPQUFPLENBQUMs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QUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDdkIsQ0FBQztDQTJCSjtBQUVELGlCQUFTLGdCQUFnQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNwID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5pbXBvcnQgbmV0ID0gcmVxdWlyZSgnbmV0JylcbmltcG9ydCBvcyA9IHJlcXVpcmUoJ29zJylcbmltcG9ydCB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5pbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoJ2F0b20nKVxuXG5jb25zdCBQSVBFX1BBVEggPSAnaGFza2VsbC1kZWJ1ZydcblxuY2xhc3MgVGVybWluYWxSZXBvcnRlciB7XG4gICAgcHJpdmF0ZSBwcm9jZXNzPzogY3AuQ2hpbGRQcm9jZXNzXG4gICAgcHJpdmF0ZSBzZXJ2ZXI6IG5ldC5TZXJ2ZXJcbiAgICBwcml2YXRlIHNvY2tldD86IG5ldC5Tb2NrZXRcblxuICAgIC8qKkV2ZW50czogIGNvbW1hbmQoY29tbWFuZDogc3RyaW5nKVxuICAgICAgICAgICAgICAgIGNsb3NlKClcbiAgICAqL1xuICAgIGVtaXR0ZXIgPSBuZXcgYXRvbUFQSS5FbWl0dGVyKClcblxuICAgIHByb21wdCAoKSB7XG4gICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiAndXNlcl9pbnB1dCdcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3cml0ZSAob3V0cHV0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IG91dHB1dFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGRpc3BsYXlDb21tYW5kIChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6ICdkaXNwbGF5LWNvbW1hbmQnLFxuICAgICAgICAgICAgY29tbWFuZFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RyZWFtRGF0YSA9ICcnXG4gICAgcHJpdmF0ZSBzZW5kIChkYXRhOiBPYmplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbmRpbmdEYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSkgKyAnXFxuJ1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtRGF0YSArPSBzZW5kaW5nRGF0YVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC53cml0ZShzZW5kaW5nRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gaWdub3JlIGVycm9zXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvdGFsRGF0YSA9ICcnXG4gICAgcHJpdmF0ZSBvbkRhdGEgKGRhdGE6IEJ1ZmZlcikge1xuICAgICAgICBjb25zdCBuZXdMaW5lUG9zID0gZGF0YS5pbmRleE9mKCdcXG4nKVxuICAgICAgICBpZiAobmV3TGluZVBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGEuc2xpY2UoMCwgbmV3TGluZVBvcylcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjb21tYW5kJywgdGhpcy50b3RhbERhdGEpXG4gICAgICAgICAgICB0aGlzLnRvdGFsRGF0YSA9ICcnXG4gICAgICAgICAgICB0aGlzLm9uRGF0YShkYXRhLnNsaWNlKG5ld0xpbmVQb3MgKyAxKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGFcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3kgKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjbG9zZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3Mua2lsbCgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvblBhdGggPSBvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInID9cbiAgICAgICAgICAgICdcXFxcXFxcXC5cXFxccGlwZVxcXFwnICsgUElQRV9QQVRIIDogYC90bXAvJHtQSVBFX1BBVEh9LnNvY2tgXG4gICAgICAgIGNvbnN0IHRlcm1pbmFsRWNob1BhdGggPSBgJHthdG9tLnBhY2thZ2VzLmdldEFjdGl2ZVBhY2thZ2UoJ2hhc2tlbGwtZGVidWcnKS5wYXRofS9saWIvVGVybWluYWxFY2hvLmpzYFxuXG4gICAgICAgIHRoaXMuc2VydmVyID0gbmV0LmNyZWF0ZVNlcnZlcigoc29ja2V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtRGF0YSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC53cml0ZSh0aGlzLnN0cmVhbURhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb2NrZXQub24oJ2RhdGEnLCAoZGF0YSkgPT4gdGhpcy5vbkRhdGEoZGF0YSkpXG4gICAgICAgICAgICBzb2NrZXQub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnY2xvc2UnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnNlcnZlci5saXN0ZW4oY29ubmVjdGlvblBhdGgsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuc2hvd1Rlcm1pbmFsJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlQ29tbWFuZCA9IGAke2F0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5ub2RlQ29tbWFuZCcpfSAke3Rlcm1pbmFsRWNob1BhdGh9YFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW1hbmRUb1J1biA9IHV0aWwuZm9ybWF0KGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy50ZXJtaW5hbENvbW1hbmQnKSwgbm9kZUNvbW1hbmQpXG5cbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MgPSBjcC5leGVjKGNvbW1hbmRUb1J1bilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmV4cG9ydCA9IFRlcm1pbmFsUmVwb3J0ZXJcbiJdfQ==