"use strict";
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32' ?
            '\\\\.\\pipe\\' + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${__dirname}/../bin/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close', undefined);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    prompt() {
        this.send({
            type: 'user_input'
        });
    }
    write(output) {
        this.send({
            type: 'message',
            content: output
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close'
            });
            this.process.kill();
        }
        this.server.close();
    }
}
module.exports = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0NBQW9DO0FBQ3BDLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUVoQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUE7QUFFakM7SUF1RUk7UUEvREEsWUFBTyxHQUdGLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBc0JsQixlQUFVLEdBQUcsRUFBRSxDQUFBO1FBZWYsY0FBUyxHQUFHLEVBQUUsQ0FBQTtRQXdCbEIsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU87WUFDNUMsZUFBZSxHQUFHLFNBQVMsR0FBRyxRQUFRLFNBQVMsT0FBTyxDQUFBO1FBQzFELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxTQUFTLHlCQUF5QixDQUFBO1FBRTlELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU07WUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7WUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDdEMsQ0FBQztZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUM5QyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDekMsQ0FBQyxD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QixDQUFDO0NBMkJKO0FBRUQsaUJBQVMsZ0JBQWdCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3AgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbmltcG9ydCBuZXQgPSByZXF1aXJlKCduZXQnKVxuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKVxuaW1wb3J0IHV0aWwgPSByZXF1aXJlKCd1dGlsJylcbmltcG9ydCBhdG9tQVBJID0gcmVxdWlyZSgnYXRvbScpXG5cbmNvbnN0IFBJUEVfUEFUSCA9ICdoYXNrZWxsLWRlYnVnJ1xuXG5jbGFzcyBUZXJtaW5hbFJlcG9ydGVyIHtcbiAgICBwcml2YXRlIHByb2Nlc3M/OiBjcC5DaGlsZFByb2Nlc3NcbiAgICBwcml2YXRlIHNlcnZlcjogbmV0LlNlcnZlclxuICAgIHByaXZhdGUgc29ja2V0PzogbmV0LlNvY2tldFxuXG4gICAgLyoqRXZlbnRzOiAgY29tbWFuZChjb21tYW5kOiBzdHJpbmcpXG4gICAgICAgICAgICAgICAgY2xvc2UoKVxuICAgICovXG4gICAgZW1pdHRlcjogYXRvbUFQSS5URW1pdHRlcjx7XG4gICAgICAnY29tbWFuZCc6IHN0cmluZ1xuICAgICAgJ2Nsb3NlJzogdW5kZWZpbmVkXG4gICAgfT4gPSBuZXcgYXRvbUFQSS5FbWl0dGVyKClcblxuICAgIHByb21wdCAoKSB7XG4gICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiAndXNlcl9pbnB1dCdcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICB3cml0ZSAob3V0cHV0OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IG91dHB1dFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGRpc3BsYXlDb21tYW5kIChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6ICdkaXNwbGF5LWNvbW1hbmQnLFxuICAgICAgICAgICAgY29tbWFuZFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RyZWFtRGF0YSA9ICcnXG4gICAgcHJpdmF0ZSBzZW5kIChkYXRhOiBPYmplY3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHNlbmRpbmdEYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSkgKyAnXFxuJ1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zb2NrZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtRGF0YSArPSBzZW5kaW5nRGF0YVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC53cml0ZShzZW5kaW5nRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gaWdub3JlIGVycm9zXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvdGFsRGF0YSA9ICcnXG4gICAgcHJpdmF0ZSBvbkRhdGEgKGRhdGE6IEJ1ZmZlcikge1xuICAgICAgICBjb25zdCBuZXdMaW5lUG9zID0gZGF0YS5pbmRleE9mKCdcXG4nKVxuICAgICAgICBpZiAobmV3TGluZVBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGEuc2xpY2UoMCwgbmV3TGluZVBvcylcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjb21tYW5kJywgdGhpcy50b3RhbERhdGEpXG4gICAgICAgICAgICB0aGlzLnRvdGFsRGF0YSA9ICcnXG4gICAgICAgICAgICB0aGlzLm9uRGF0YShkYXRhLnNsaWNlKG5ld0xpbmVQb3MgKyAxKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGFcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3kgKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjbG9zZSdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnByb2Nlc3Mua2lsbCgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvblBhdGggPSBvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInID9cbiAgICAgICAgICAgICdcXFxcXFxcXC5cXFxccGlwZVxcXFwnICsgUElQRV9QQVRIIDogYC90bXAvJHtQSVBFX1BBVEh9LnNvY2tgXG4gICAgICAgIGNvbnN0IHRlcm1pbmFsRWNob1BhdGggPSBgJHtfX2Rpcm5hbWV9Ly4uL2Jpbi9UZXJtaW5hbEVjaG8uanNgXG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKChzb2NrZXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgICAgICAgICBpZiAodGhpcy5zdHJlYW1EYXRhICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LndyaXRlKHRoaXMuc3RyZWFtRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvY2tldC5vbignZGF0YScsIChkYXRhKSA9PiB0aGlzLm9uRGF0YShkYXRhKSlcbiAgICAgICAgICAgIHNvY2tldC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjbG9zZScsIHVuZGVmaW5lZClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIubGlzdGVuKGNvbm5lY3Rpb25QYXRoLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnNob3dUZXJtaW5hbCcpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUNvbW1hbmQgPSBgJHthdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcubm9kZUNvbW1hbmQnKX0gJHt0ZXJtaW5hbEVjaG9QYXRofWBcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tYW5kVG9SdW4gPSB1dGlsLmZvcm1hdChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcudGVybWluYWxDb21tYW5kJyksIG5vZGVDb21tYW5kKVxuXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzID0gY3AuZXhlYyhjb21tYW5kVG9SdW4pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5leHBvcnQgPSBUZXJtaW5hbFJlcG9ydGVyXG4iXX0=