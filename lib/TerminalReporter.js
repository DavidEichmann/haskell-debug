"use strict";
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32' ?
            '\\\\.\\pipe\\' + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${__dirname}/../bin/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close', undefined);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    prompt() {
        this.send({
            type: 'user_input'
        });
    }
    write(output) {
        this.send({
            type: 'message',
            content: output
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close'
            });
            this.process.kill();
        }
        this.server.close();
    }
}
module.exports = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0NBQW9DO0FBQ3BDLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUVoQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUE7QUFFakM7SUF1RUU7UUEvREEsWUFBTyxHQUdGLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBc0JsQixlQUFVLEdBQUcsRUFBRSxDQUFBO1FBZWYsY0FBUyxHQUFHLEVBQUUsQ0FBQTtRQXdCcEIsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU87WUFDOUMsZUFBZSxHQUFHLFNBQVMsR0FBRyxRQUFRLFNBQVMsT0FBTyxDQUFBO1FBQ3hELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxTQUFTLHlCQUF5QixDQUFBO1FBRTlELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU07WUFDcEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7WUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDcEMsQ0FBQztZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUM5QyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDZixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDdkMsQ0FBQyxD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QixDQUFDO0NBMkJGO0FBRUQsaUJBQVMsZ0JBQWdCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3AgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJylcbmltcG9ydCBuZXQgPSByZXF1aXJlKCduZXQnKVxuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKVxuaW1wb3J0IHV0aWwgPSByZXF1aXJlKCd1dGlsJylcbmltcG9ydCBhdG9tQVBJID0gcmVxdWlyZSgnYXRvbScpXG5cbmNvbnN0IFBJUEVfUEFUSCA9ICdoYXNrZWxsLWRlYnVnJ1xuXG5jbGFzcyBUZXJtaW5hbFJlcG9ydGVyIHtcbiAgcHJpdmF0ZSBwcm9jZXNzPzogY3AuQ2hpbGRQcm9jZXNzXG4gIHByaXZhdGUgc2VydmVyOiBuZXQuU2VydmVyXG4gIHByaXZhdGUgc29ja2V0PzogbmV0LlNvY2tldFxuXG4gIC8qKkV2ZW50czogIGNvbW1hbmQoY29tbWFuZDogc3RyaW5nKVxuICAgICAgICAgICAgICBjbG9zZSgpXG4gICovXG4gIGVtaXR0ZXI6IGF0b21BUEkuVEVtaXR0ZXI8e1xuICAgICdjb21tYW5kJzogc3RyaW5nXG4gICAgJ2Nsb3NlJzogdW5kZWZpbmVkXG4gIH0+ID0gbmV3IGF0b21BUEkuRW1pdHRlcigpXG5cbiAgcHJvbXB0KCkge1xuICAgIHRoaXMuc2VuZCh7XG4gICAgICB0eXBlOiAndXNlcl9pbnB1dCdcbiAgICB9KVxuICB9XG5cbiAgd3JpdGUob3V0cHV0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgY29udGVudDogb3V0cHV0XG4gICAgfSlcbiAgfVxuXG4gIGRpc3BsYXlDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgIHRoaXMuc2VuZCh7XG4gICAgICB0eXBlOiAnZGlzcGxheS1jb21tYW5kJyxcbiAgICAgIGNvbW1hbmRcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBzdHJlYW1EYXRhID0gJydcbiAgcHJpdmF0ZSBzZW5kKGRhdGE6IE9iamVjdCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzZW5kaW5nRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpICsgJ1xcbidcblxuICAgICAgaWYgKHRoaXMuc29ja2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zdHJlYW1EYXRhICs9IHNlbmRpbmdEYXRhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNvY2tldC53cml0ZShzZW5kaW5nRGF0YSlcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZ25vcmUgZXJyb3NcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHRvdGFsRGF0YSA9ICcnXG4gIHByaXZhdGUgb25EYXRhKGRhdGE6IEJ1ZmZlcikge1xuICAgIGNvbnN0IG5ld0xpbmVQb3MgPSBkYXRhLmluZGV4T2YoJ1xcbicpXG4gICAgaWYgKG5ld0xpbmVQb3MgIT09IC0xKSB7XG4gICAgICB0aGlzLnRvdGFsRGF0YSArPSBkYXRhLnNsaWNlKDAsIG5ld0xpbmVQb3MpXG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnY29tbWFuZCcsIHRoaXMudG90YWxEYXRhKVxuICAgICAgdGhpcy50b3RhbERhdGEgPSAnJ1xuICAgICAgdGhpcy5vbkRhdGEoZGF0YS5zbGljZShuZXdMaW5lUG9zICsgMSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGFcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnByb2Nlc3MpIHtcbiAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgIHR5cGU6ICdjbG9zZSdcbiAgICAgIH0pXG4gICAgICB0aGlzLnByb2Nlc3Mua2lsbCgpXG4gICAgfVxuICAgIHRoaXMuc2VydmVyLmNsb3NlKClcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGNvbm5lY3Rpb25QYXRoID0gb3MucGxhdGZvcm0oKSA9PT0gJ3dpbjMyJyA/XG4gICAgICAnXFxcXFxcXFwuXFxcXHBpcGVcXFxcJyArIFBJUEVfUEFUSCA6IGAvdG1wLyR7UElQRV9QQVRIfS5zb2NrYFxuICAgIGNvbnN0IHRlcm1pbmFsRWNob1BhdGggPSBgJHtfX2Rpcm5hbWV9Ly4uL2Jpbi9UZXJtaW5hbEVjaG8uanNgXG5cbiAgICB0aGlzLnNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoKHNvY2tldCkgPT4ge1xuICAgICAgdGhpcy5zb2NrZXQgPSBzb2NrZXRcbiAgICAgIGlmICh0aGlzLnN0cmVhbURhdGEgIT09ICcnKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LndyaXRlKHRoaXMuc3RyZWFtRGF0YSlcbiAgICAgIH1cbiAgICAgIHNvY2tldC5vbignZGF0YScsIChkYXRhKSA9PiB0aGlzLm9uRGF0YShkYXRhKSlcbiAgICAgIHNvY2tldC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnY2xvc2UnLCB1bmRlZmluZWQpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICB0aGlzLnNlcnZlci5saXN0ZW4oY29ubmVjdGlvblBhdGgsICgpID0+IHtcbiAgICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcuc2hvd1Rlcm1pbmFsJykpIHtcbiAgICAgICAgY29uc3Qgbm9kZUNvbW1hbmQgPSBgJHthdG9tLmNvbmZpZy5nZXQoJ2hhc2tlbGwtZGVidWcubm9kZUNvbW1hbmQnKX0gJHt0ZXJtaW5hbEVjaG9QYXRofWBcbiAgICAgICAgY29uc3QgY29tbWFuZFRvUnVuID0gdXRpbC5mb3JtYXQoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnRlcm1pbmFsQ29tbWFuZCcpLCBub2RlQ29tbWFuZClcblxuICAgICAgICB0aGlzLnByb2Nlc3MgPSBjcC5leGVjKGNvbW1hbmRUb1J1bilcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCA9IFRlcm1pbmFsUmVwb3J0ZXJcbiJdfQ==