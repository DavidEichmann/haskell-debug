"use strict";
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = "haskell-debug";
class TerminalReporter {
    constructor() {
        this.process = null;
        this.socket = null;
        this.emitter = new atomAPI.Emitter();
        this.streamData = "";
        this.totalData = "";
        var connectionPath = os.platform() == "win32" ?
            "\\\\.\\pipe\\" + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        var terminalEchoPath = `${atom.packages.getActivePackage("haskell-debug").path}/lib/TerminalEcho.js`;
        this.server = net.createServer(socket => {
            this.socket = socket;
            if (this.streamData !== "") {
                this.socket.write(this.streamData);
            }
            socket.on("data", data => this.onData(data));
            socket.on("end", () => {
                this.emitter.emit("close", null);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get("haskell-debug.showTerminal")) {
                var nodeCommand = `${atom.config.get("haskell-debug.nodeCommand")} ${terminalEchoPath}`;
                var commandToRun = util.format(atom.config.get("haskell-debug.terminalCommand"), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    prompt() {
        this.send({
            type: "user_input"
        });
    }
    write(output) {
        this.send({
            type: "message",
            content: output
        });
    }
    displayCommand(command) {
        this.send({
            type: "display-command",
            command: command
        });
    }
    send(data) {
        try {
            var sendingData = JSON.stringify(data) + "\n";
            if (this.socket == null)
                this.streamData += sendingData;
            else
                this.socket.write(sendingData);
        }
        catch (e) {
        }
    }
    onData(data) {
        var newLinePos = data.indexOf("\n");
        if (newLinePos != -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit("command", this.totalData);
            this.totalData = "";
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
    destroy() {
        if (this.process != null) {
            this.send({
                type: "close"
            });
            this.process.kill();
        }
        this.server.close();
    }
}
module.exports = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0NBQXFDO0FBQ3JDLDJCQUE0QjtBQUM1Qix5QkFBMEI7QUFDMUIsNkJBQThCO0FBQzlCLGdDQUFpQztBQUVqQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUM7QUFFbEM7SUFxRUk7UUFwRVEsWUFBTyxHQUFvQixJQUFJLENBQUM7UUFFaEMsV0FBTSxHQUFlLElBQUksQ0FBQztRQUtsQyxZQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7UUFzQnhCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFlaEIsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQXlCbkIsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLE9BQU87WUFDekMsZUFBZSxHQUFHLFNBQVMsR0FBRyxRQUFRLFNBQVMsT0FBTyxDQUFDO1FBQzNELElBQUksZ0JBQWdCLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksc0JBQXNCLENBQUM7UUFFckcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7WUFDcEIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQSxDQUFDO2dCQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdkMsQ0FBQztZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDN0MsTUFBTSxDQUFDLEVB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QUMsSUFBSSxFQUFFLENBQUM7UUFDeEIsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQTJCSjtBQUVELGlCQUFTLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNwID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XG5pbXBvcnQgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5pbXBvcnQgb3MgPSByZXF1aXJlKFwib3NcIik7XG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKFwiYXRvbVwiKTtcblxuY29uc3QgUElQRV9QQVRIID0gXCJoYXNrZWxsLWRlYnVnXCI7XG5cbmNsYXNzIFRlcm1pbmFsUmVwb3J0ZXJ7XG4gICAgcHJpdmF0ZSBwcm9jZXNzOiBjcC5DaGlsZFByb2Nlc3MgPSBudWxsO1xuICAgIHByaXZhdGUgc2VydmVyOiBuZXQuU2VydmVyO1xuICAgIHByaXZhdGUgc29ja2V0OiBuZXQuU29ja2V0ID0gbnVsbDtcblxuICAgIC8qKkV2ZW50czogIGNvbW1hbmQoY29tbWFuZDogc3RyaW5nKVxuICAgICAgICAgICAgICAgIGNsb3NlKClcbiAgICAqL1xuICAgIGVtaXR0ZXIgPSBuZXcgYXRvbUFQSS5FbWl0dGVyKCk7XG5cbiAgICBwcm9tcHQoKSB7XG4gICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiBcInVzZXJfaW5wdXRcIlxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHdyaXRlKG91dHB1dDogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgY29udGVudDogb3V0cHV0XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZGlzcGxheUNvbW1hbmQoY29tbWFuZDogc3RyaW5nKXtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGlzcGxheS1jb21tYW5kXCIsXG4gICAgICAgICAgICBjb21tYW5kOiBjb21tYW5kXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdHJlYW1EYXRhID0gXCJcIjtcbiAgICBwcml2YXRlIHNlbmQoZGF0YTogT2JqZWN0KXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgdmFyIHNlbmRpbmdEYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSkgKyBcIlxcblwiO1xuXG4gICAgICAgICAgICBpZih0aGlzLnNvY2tldCA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtRGF0YSArPSBzZW5kaW5nRGF0YTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC53cml0ZShzZW5kaW5nRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSl7XG4gICAgICAgICAgICAvL2lnbm9yZSBlcnJvc1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b3RhbERhdGEgPSBcIlwiO1xuICAgIHByaXZhdGUgb25EYXRhKGRhdGE6IEJ1ZmZlcil7XG4gICAgICAgIHZhciBuZXdMaW5lUG9zID0gZGF0YS5pbmRleE9mKFwiXFxuXCIpO1xuICAgICAgICBpZihuZXdMaW5lUG9zICE9IC0xKXtcbiAgICAgICAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGEuc2xpY2UoMCwgbmV3TGluZVBvcyk7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChcImNvbW1hbmRcIiwgdGhpcy50b3RhbERhdGEpO1xuICAgICAgICAgICAgdGhpcy50b3RhbERhdGEgPSBcIlwiO1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEoZGF0YS5zbGljZShuZXdMaW5lUG9zICsgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICB0aGlzLnRvdGFsRGF0YSArPSBkYXRhO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpe1xuICAgICAgICBpZih0aGlzLnByb2Nlc3MgIT0gbnVsbCl7XG4gICAgICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiY2xvc2VcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzcy5raWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB2YXIgY29ubmVjdGlvblBhdGggPSBvcy5wbGF0Zm9ybSgpID09IFwid2luMzJcIiA/XG4gICAgICAgICAgICBcIlxcXFxcXFxcLlxcXFxwaXBlXFxcXFwiICsgUElQRV9QQVRIIDogYC90bXAvJHtQSVBFX1BBVEh9LnNvY2tgO1xuICAgICAgICB2YXIgdGVybWluYWxFY2hvUGF0aCA9IGAke2F0b20ucGFja2FnZXMuZ2V0QWN0aXZlUGFja2FnZShcImhhc2tlbGwtZGVidWdcIikucGF0aH0vbGliL1Rlcm1pbmFsRWNoby5qc2A7XG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKHNvY2tldCA9PiB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgICAgICAgICAgaWYodGhpcy5zdHJlYW1EYXRhICE9PSBcIlwiKXtcbiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC53cml0ZSh0aGlzLnN0cmVhbURhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc29ja2V0Lm9uKFwiZGF0YVwiLCBkYXRhID0+IHRoaXMub25EYXRhKGRhdGEpKTtcbiAgICAgICAgICAgIHNvY2tldC5vbihcImVuZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoXCJjbG9zZVwiLCBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbihjb25uZWN0aW9uUGF0aCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYoYXRvbS5jb25maWcuZ2V0KFwiaGFza2VsbC1kZWJ1Zy5zaG93VGVybWluYWxcIikpe1xuICAgICAgICAgICAgICAgIHZhciBub2RlQ29tbWFuZCA9IGAke2F0b20uY29uZmlnLmdldChcImhhc2tlbGwtZGVidWcubm9kZUNvbW1hbmRcIil9ICR7dGVybWluYWxFY2hvUGF0aH1gO1xuICAgICAgICAgICAgICAgIHZhciBjb21tYW5kVG9SdW4gPSB1dGlsLmZvcm1hdChhdG9tLmNvbmZpZy5nZXQoXCJoYXNrZWxsLWRlYnVnLnRlcm1pbmFsQ29tbWFuZFwiKSwgbm9kZUNvbW1hbmQpXG5cbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MgPSBjcC5leGVjKGNvbW1hbmRUb1J1bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0ID0gVGVybWluYWxSZXBvcnRlcjtcbiJdfQ==