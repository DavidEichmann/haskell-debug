"use strict";
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = "haskell-debug";
class TerminalReporter {
    constructor() {
        this.process = null;
        this.socket = null;
        this.emitter = new atomAPI.Emitter();
        this.streamData = "";
        this.totalData = "";
        var connectionPath = os.platform() == "win32" ?
            "\\\\.\\pipe\\" + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        var terminalEchoPath = `${atom.packages.getActivePackage("haskell-debug").path}/lib/TerminalEcho.js`;
        this.server = net.createServer(socket => {
            this.socket = socket;
            if (this.streamData !== "") {
                this.socket.write(this.streamData);
            }
            socket.on("data", data => this.onData(data));
            socket.on("end", () => {
                this.emitter.emit("close", null);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get("haskell-debug.showTerminal")) {
                var nodeCommand = `${atom.config.get("haskell-debug.nodeCommand")} ${terminalEchoPath}`;
                var commandToRun = util.format(atom.config.get("haskell-debug.terminalCommand"), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    prompt() {
        this.send({
            type: "user_input"
        });
    }
    write(output) {
        this.send({
            type: "message",
            content: output
        });
    }
    displayCommand(command) {
        this.send({
            type: "display-command",
            command: command
        });
    }
    send(data) {
        try {
            var sendingData = JSON.stringify(data) + "\n";
            if (this.socket == null)
                this.streamData += sendingData;
            else
                this.socket.write(sendingData);
        }
        catch (e) {
        }
    }
    onData(data) {
        var newLinePos = data.indexOf("\n");
        if (newLinePos != -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit("command", this.totalData);
            this.totalData = "";
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
    destroy() {
        if (this.process != null) {
            this.send({
                type: "close"
            });
            this.process.kill();
        }
        this.server.close();
    }
}
module.exports = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXJtaW5hbFJlcG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBcUM7QUFDckMsMkJBQTRCO0FBQzVCLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIsZ0NBQWlDO0FBRWpDLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQztBQUVsQztJQXFFSTtRQXBFUSxZQUFPLEdBQW9CLElBQUksQ0FBQztRQUVoQyxXQUFNLEdBQWUsSUFBSSxDQUFDO1FBS2xDLFlBQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQXNCeEIsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQWVoQixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBeUJuQixJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksT0FBTztZQUN6QyxlQUFlLEdBQUcsU0FBUyxHQUFHLFFBQVEsU0FBUyxPQUFPLENBQUM7UUFDM0QsSUFBSSxnQkFBZ0IsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxzQkFBc0IsQ0FBQztRQUVyRyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTTtZQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtZQUNwQixFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsQ0FBQyxDQUFBLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN2QyxDQUFDO1lBQ0QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNLENBQUMsRUFBRSxD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QUFJLEVBQUUsQ0FBQztRQUN4QixDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN4QixDQUFDO0NBMkJKO0FBRUQsaUJBQVMsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3AgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcbmltcG9ydCBuZXQgPSByZXF1aXJlKCduZXQnKTtcbmltcG9ydCBvcyA9IHJlcXVpcmUoXCJvc1wiKTtcbmltcG9ydCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5pbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoXCJhdG9tXCIpO1xuXG5jb25zdCBQSVBFX1BBVEggPSBcImhhc2tlbGwtZGVidWdcIjtcblxuY2xhc3MgVGVybWluYWxSZXBvcnRlcntcbiAgICBwcml2YXRlIHByb2Nlc3M6IGNwLkNoaWxkUHJvY2VzcyA9IG51bGw7XG4gICAgcHJpdmF0ZSBzZXJ2ZXI6IG5ldC5TZXJ2ZXI7XG4gICAgcHJpdmF0ZSBzb2NrZXQ6IG5ldC5Tb2NrZXQgPSBudWxsO1xuXG4gICAgLyoqRXZlbnRzOiAgY29tbWFuZChjb21tYW5kOiBzdHJpbmcpXG4gICAgICAgICAgICAgICAgY2xvc2UoKVxuICAgICovXG4gICAgZW1pdHRlciA9IG5ldyBhdG9tQVBJLkVtaXR0ZXIoKTtcblxuICAgIHByb21wdCgpIHtcbiAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgIHR5cGU6IFwidXNlcl9pbnB1dFwiXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgd3JpdGUob3V0cHV0OiBzdHJpbmcpe1xuICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBjb250ZW50OiBvdXRwdXRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBkaXNwbGF5Q29tbWFuZChjb21tYW5kOiBzdHJpbmcpe1xuICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogXCJkaXNwbGF5LWNvbW1hbmRcIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0cmVhbURhdGEgPSBcIlwiO1xuICAgIHByaXZhdGUgc2VuZChkYXRhOiBPYmplY3Qpe1xuICAgICAgICB0cnl7XG4gICAgICAgICAgICB2YXIgc2VuZGluZ0RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKSArIFwiXFxuXCI7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuc29ja2V0ID09IG51bGwpXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1EYXRhICs9IHNlbmRpbmdEYXRhO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LndyaXRlKHNlbmRpbmdEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vaWdub3JlIGVycm9zXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRvdGFsRGF0YSA9IFwiXCI7XG4gICAgcHJpdmF0ZSBvbkRhdGEoZGF0YTogc3RyaW5nKXtcbiAgICAgICAgdmFyIG5ld0xpbmVQb3MgPSBkYXRhLmluZGV4T2YoXCJcXG5cIik7XG4gICAgICAgIGlmKG5ld0xpbmVQb3MgIT0gLTEpe1xuICAgICAgICAgICAgdGhpcy50b3RhbERhdGEgKz0gZGF0YS5zbGljZSgwLCBuZXdMaW5lUG9zKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KFwiY29tbWFuZFwiLCB0aGlzLnRvdGFsRGF0YSk7XG4gICAgICAgICAgICB0aGlzLnRvdGFsRGF0YSA9IFwiXCI7XG4gICAgICAgICAgICB0aGlzLm9uRGF0YShkYXRhLnNsaWNlKG5ld0xpbmVQb3MgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCl7XG4gICAgICAgIGlmKHRoaXMucHJvY2VzcyAhPSBudWxsKXtcbiAgICAgICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJjbG9zZVwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzLmtpbGwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcnZlci5jbG9zZSgpO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHZhciBjb25uZWN0aW9uUGF0aCA9IG9zLnBsYXRmb3JtKCkgPT0gXCJ3aW4zMlwiID9cbiAgICAgICAgICAgIFwiXFxcXFxcXFwuXFxcXHBpcGVcXFxcXCIgKyBQSVBFX1BBVEggOiBgL3RtcC8ke1BJUEVfUEFUSH0uc29ja2A7XG4gICAgICAgIHZhciB0ZXJtaW5hbEVjaG9QYXRoID0gYCR7YXRvbS5wYWNrYWdlcy5nZXRBY3RpdmVQYWNrYWdlKFwiaGFza2VsbC1kZWJ1Z1wiKS5wYXRofS9saWIvVGVybWluYWxFY2hvLmpzYDtcblxuICAgICAgICB0aGlzLnNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoc29ja2V0ID0+IHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgICAgICAgICBpZih0aGlzLnN0cmVhbURhdGEgIT09IFwiXCIpe1xuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LndyaXRlKHRoaXMuc3RyZWFtRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb2NrZXQub24oXCJkYXRhXCIsIGRhdGEgPT4gdGhpcy5vbkRhdGEoZGF0YSkpO1xuICAgICAgICAgICAgc29ja2V0Lm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdChcImNsb3NlXCIsIG51bGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIubGlzdGVuKGNvbm5lY3Rpb25QYXRoLCAoKSA9PiB7XG4gICAgICAgICAgICBpZihhdG9tLmNvbmZpZy5nZXQoXCJoYXNrZWxsLWRlYnVnLnNob3dUZXJtaW5hbFwiKSl7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGVDb21tYW5kID0gYCR7YXRvbS5jb25maWcuZ2V0KFwiaGFza2VsbC1kZWJ1Zy5ub2RlQ29tbWFuZFwiKX0gJHt0ZXJtaW5hbEVjaG9QYXRofWA7XG4gICAgICAgICAgICAgICAgdmFyIGNvbW1hbmRUb1J1biA9IHV0aWwuZm9ybWF0KGF0b20uY29uZmlnLmdldChcImhhc2tlbGwtZGVidWcudGVybWluYWxDb21tYW5kXCIpLCBub2RlQ29tbWFuZClcblxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyA9IGNwLmV4ZWMoY29tbWFuZFRvUnVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgPSBUZXJtaW5hbFJlcG9ydGVyO1xuIl19