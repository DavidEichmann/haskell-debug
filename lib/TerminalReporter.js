"use strict";
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32' ?
            '\\\\.\\pipe\\' + PIPE_PATH : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${__dirname}/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close');
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    prompt() {
        this.send({
            type: 'user_input'
        });
    }
    write(output) {
        this.send({
            type: 'message',
            content: output
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close'
            });
            this.process.kill();
        }
        this.server.close();
    }
}
module.exports = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9saWIvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0NBQW9DO0FBQ3BDLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdDQUFnQztBQUVoQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUE7QUFFakM7SUFvRUk7UUE1REEsWUFBTyxHQUFHLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBc0J2QixlQUFVLEdBQUcsRUFBRSxDQUFBO1FBZWYsY0FBUyxHQUFHLEVBQUUsQ0FBQTtRQXdCbEIsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU87WUFDNUMsZUFBZSxHQUFHLFNBQVMsR0FBRyxRQUFRLFNBQVMsT0FBTyxDQUFBO1FBQzFELE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxTQUFTLGtCQUFrQixDQUFBO1FBRXZELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU07WUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7WUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDdEMsQ0FBQztZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtZQUM5QyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUM5QixDQUFDLENBQUMsQ0FBQTtR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Qko7QUFFRCxpQkFBUyxnQkFBZ0IsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuaW1wb3J0IG5ldCA9IHJlcXVpcmUoJ25ldCcpXG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpXG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKVxuaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKCdhdG9tJylcblxuY29uc3QgUElQRV9QQVRIID0gJ2hhc2tlbGwtZGVidWcnXG5cbmNsYXNzIFRlcm1pbmFsUmVwb3J0ZXIge1xuICAgIHByaXZhdGUgcHJvY2Vzcz86IGNwLkNoaWxkUHJvY2Vzc1xuICAgIHByaXZhdGUgc2VydmVyOiBuZXQuU2VydmVyXG4gICAgcHJpdmF0ZSBzb2NrZXQ/OiBuZXQuU29ja2V0XG5cbiAgICAvKipFdmVudHM6ICBjb21tYW5kKGNvbW1hbmQ6IHN0cmluZylcbiAgICAgICAgICAgICAgICBjbG9zZSgpXG4gICAgKi9cbiAgICBlbWl0dGVyID0gbmV3IGF0b21BUEkuRW1pdHRlcigpXG5cbiAgICBwcm9tcHQgKCkge1xuICAgICAgICB0aGlzLnNlbmQoe1xuICAgICAgICAgICAgdHlwZTogJ3VzZXJfaW5wdXQnXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgd3JpdGUgKG91dHB1dDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiAnbWVzc2FnZScsXG4gICAgICAgICAgICBjb250ZW50OiBvdXRwdXRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBkaXNwbGF5Q29tbWFuZCAoY29tbWFuZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgICAgICB0eXBlOiAnZGlzcGxheS1jb21tYW5kJyxcbiAgICAgICAgICAgIGNvbW1hbmRcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0cmVhbURhdGEgPSAnJ1xuICAgIHByaXZhdGUgc2VuZCAoZGF0YTogT2JqZWN0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzZW5kaW5nRGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpICsgJ1xcbidcblxuICAgICAgICAgICAgaWYgKHRoaXMuc29ja2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbURhdGEgKz0gc2VuZGluZ0RhdGFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUoc2VuZGluZ0RhdGEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvc1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB0b3RhbERhdGEgPSAnJ1xuICAgIHByaXZhdGUgb25EYXRhIChkYXRhOiBCdWZmZXIpIHtcbiAgICAgICAgY29uc3QgbmV3TGluZVBvcyA9IGRhdGEuaW5kZXhPZignXFxuJylcbiAgICAgICAgaWYgKG5ld0xpbmVQb3MgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsRGF0YSArPSBkYXRhLnNsaWNlKDAsIG5ld0xpbmVQb3MpXG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnY29tbWFuZCcsIHRoaXMudG90YWxEYXRhKVxuICAgICAgICAgICAgdGhpcy50b3RhbERhdGEgPSAnJ1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEoZGF0YS5zbGljZShuZXdMaW5lUG9zICsgMSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsRGF0YSArPSBkYXRhXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95ICgpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzcykge1xuICAgICAgICAgICAgdGhpcy5zZW5kKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2xvc2UnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzLmtpbGwoKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VydmVyLmNsb3NlKClcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb25QYXRoID0gb3MucGxhdGZvcm0oKSA9PT0gJ3dpbjMyJyA/XG4gICAgICAgICAgICAnXFxcXFxcXFwuXFxcXHBpcGVcXFxcJyArIFBJUEVfUEFUSCA6IGAvdG1wLyR7UElQRV9QQVRIfS5zb2NrYFxuICAgICAgICBjb25zdCB0ZXJtaW5hbEVjaG9QYXRoID0gYCR7X19kaXJuYW1lfS9UZXJtaW5hbEVjaG8uanNgXG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKChzb2NrZXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgICAgICAgICBpZiAodGhpcy5zdHJlYW1EYXRhICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0LndyaXRlKHRoaXMuc3RyZWFtRGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvY2tldC5vbignZGF0YScsIChkYXRhKSA9PiB0aGlzLm9uRGF0YShkYXRhKSlcbiAgICAgICAgICAgIHNvY2tldC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjbG9zZScpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbihjb25uZWN0aW9uUGF0aCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGF0b20uY29uZmlnLmdldCgnaGFza2VsbC1kZWJ1Zy5zaG93VGVybWluYWwnKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVDb21tYW5kID0gYCR7YXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLm5vZGVDb21tYW5kJyl9ICR7dGVybWluYWxFY2hvUGF0aH1gXG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWFuZFRvUnVuID0gdXRpbC5mb3JtYXQoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnRlcm1pbmFsQ29tbWFuZCcpLCBub2RlQ29tbWFuZClcblxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2VzcyA9IGNwLmV4ZWMoY29tbWFuZFRvUnVuKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0ID0gVGVybWluYWxSZXBvcnRlclxuIl19