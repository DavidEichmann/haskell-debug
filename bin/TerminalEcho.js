"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const net = require("net");
const os = require("os");
const readline = require("readline");
const PIPE_NAME = 'haskell-debug';
const connectionPath = os.platform() === 'win32' ?
    '\\\\.\\pipe\\' + PIPE_NAME : `/tmp/${PIPE_NAME}.sock`;
const client = net.connect(connectionPath);
const rl = readline.createInterface({
    input: process.stdin,
});
let ignoreOutput = false;
rl.on('line', (text) => {
    if (ignoreOutput) {
        ignoreOutput = false;
        return;
    }
    client.write(text + '\n');
});
let totalData = '';
client.on('data', (data) => {
    onData(data.toString());
});
function onData(data) {
    const newLinePos = data.indexOf('\n');
    if (newLinePos !== -1) {
        totalData += data.slice(0, newLinePos);
        onMessage(JSON.parse(totalData));
        totalData = '';
        onData(data.slice(newLinePos + 1));
    }
    else {
        totalData += data;
    }
}
function onMessage(message) {
    if (message.type === 'message') {
        process.stdout.write(message.content);
    }
    else if (message.type === 'display-command') {
        process.stdout.write(message.command + '\n');
        ignoreOutput = true;
        rl.write('\n');
    }
    else if (message.type === 'destroy-prompt') {
        rl.close();
    }
    else if (message.type === 'close') {
        process.exit();
    }
    else if (message.type === 'user-input') {
        rl.prompt();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxFY2hvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Jpbi9UZXJtaW5hbEVjaG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLHFDQUFxQztBQUdyQyxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUE7QUFFakMsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU87SUFDOUMsZUFBZSxHQUFHLFNBQVMsR0FBRyxRQUFRLFNBQVMsT0FBTyxDQUFBO0FBQ3hELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7QUFFMUMsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQztJQUNsQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7Q0FDckIsQ0FBQyxDQUFBO0FBRUYsSUFBSSxZQUFZLEdBQUcsS0FBSyxDQUFBO0FBRXhCLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWTtJQUN6QixFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLFlBQVksR0FBRyxLQUFLLENBQUE7UUFDcEIsTUFBTSxDQUFBO0lBQ1IsQ0FBQztJQUNELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFBO0FBQzNCLENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFBO0FBQ2xCLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBWTtJQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7QUFDekIsQ0FBQyxDQUFDLENBQUE7QUFFRixnQkFBZ0IsSUFBWTtJQUMxQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3JDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsU0FBUyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3RDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUE7UUFDaEMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtRQUNkLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLFNBQVMsSUFBSSxJQUFJLENBQUE7SUFDbkIsQ0FBQztBQUNILENBQUM7QUFFRCxtQkFBbUIsT0FBZ0I7SUFDakMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUE7UUFDNUMsWUFBWSxHQUFHLElBQUksQ0FBQTtRQUNuQixFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7UUFDN0MsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ1osQ0FBQztJQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDcEMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ2hCLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUNiLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5ldCA9IHJlcXVpcmUoJ25ldCcpXG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpXG5pbXBvcnQgcmVhZGxpbmUgPSByZXF1aXJlKCdyZWFkbGluZScpXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnLi9tZXNzYWdlJ1xuXG5jb25zdCBQSVBFX05BTUUgPSAnaGFza2VsbC1kZWJ1ZydcblxuY29uc3QgY29ubmVjdGlvblBhdGggPSBvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInID9cbiAgJ1xcXFxcXFxcLlxcXFxwaXBlXFxcXCcgKyBQSVBFX05BTUUgOiBgL3RtcC8ke1BJUEVfTkFNRX0uc29ja2BcbmNvbnN0IGNsaWVudCA9IG5ldC5jb25uZWN0KGNvbm5lY3Rpb25QYXRoKVxuXG5jb25zdCBybCA9IHJlYWRsaW5lLmNyZWF0ZUludGVyZmFjZSh7XG4gIGlucHV0OiBwcm9jZXNzLnN0ZGluLFxufSlcblxubGV0IGlnbm9yZU91dHB1dCA9IGZhbHNlXG5cbnJsLm9uKCdsaW5lJywgKHRleHQ6IHN0cmluZykgPT4ge1xuICBpZiAoaWdub3JlT3V0cHV0KSB7XG4gICAgaWdub3JlT3V0cHV0ID0gZmFsc2VcbiAgICByZXR1cm5cbiAgfVxuICBjbGllbnQud3JpdGUodGV4dCArICdcXG4nKVxufSlcblxubGV0IHRvdGFsRGF0YSA9ICcnXG5jbGllbnQub24oJ2RhdGEnLCAoZGF0YTogQnVmZmVyKSA9PiB7XG4gIG9uRGF0YShkYXRhLnRvU3RyaW5nKCkpXG59KVxuXG5mdW5jdGlvbiBvbkRhdGEoZGF0YTogc3RyaW5nKSB7XG4gIGNvbnN0IG5ld0xpbmVQb3MgPSBkYXRhLmluZGV4T2YoJ1xcbicpXG4gIGlmIChuZXdMaW5lUG9zICE9PSAtMSkge1xuICAgIHRvdGFsRGF0YSArPSBkYXRhLnNsaWNlKDAsIG5ld0xpbmVQb3MpXG4gICAgb25NZXNzYWdlKEpTT04ucGFyc2UodG90YWxEYXRhKSlcbiAgICB0b3RhbERhdGEgPSAnJ1xuICAgIG9uRGF0YShkYXRhLnNsaWNlKG5ld0xpbmVQb3MgKyAxKSlcbiAgfSBlbHNlIHtcbiAgICB0b3RhbERhdGEgKz0gZGF0YVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlKSB7XG4gIGlmIChtZXNzYWdlLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKG1lc3NhZ2UuY29udGVudClcbiAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09ICdkaXNwbGF5LWNvbW1hbmQnKSB7XG4gICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUobWVzc2FnZS5jb21tYW5kICsgJ1xcbicpXG4gICAgaWdub3JlT3V0cHV0ID0gdHJ1ZVxuICAgIHJsLndyaXRlKCdcXG4nKVxuICB9IGVsc2UgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ2Rlc3Ryb3ktcHJvbXB0Jykge1xuICAgIHJsLmNsb3NlKClcbiAgfSBlbHNlIGlmIChtZXNzYWdlLnR5cGUgPT09ICdjbG9zZScpIHtcbiAgICBwcm9jZXNzLmV4aXQoKVxuICB9IGVsc2UgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VzZXItaW5wdXQnKSB7XG4gICAgcmwucHJvbXB0KClcbiAgfVxufVxuIl19